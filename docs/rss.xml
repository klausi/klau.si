<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Klausi&#x27;s Weblog</title>
        <link>https://klau.si</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://klau.si/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Russmedia CTO meetup talk: Pull Request Review best practices</title>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/russmedia-cto-meetup-talk-pull-request-review/</link>
            <guid>https://klau.si/blog/russmedia-cto-meetup-talk-pull-request-review/</guid>
            <description>&lt;p&gt;Here is the video of my Russmedia CTO &amp;amp; product meetup talk &amp;quot;Pull Request Review best practices&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;6CbdQaWI5Hk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2019 talk: Find security vulnerabilities through code review</title>
            <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-security-code-review/</link>
            <guid>https://klau.si/blog/drupalcon-security-code-review/</guid>
            <description>&lt;p&gt;Here are &lt;a href=&quot;https:&#x2F;&#x2F;klausi.github.io&#x2F;sec-code-review2019&#x2F;#&#x2F;&quot;&gt;the slides&lt;&#x2F;a&gt; and the video of my DrupalCon Amsterdam 2019 talk &amp;quot;Find security vulnerabilities through code review&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;Oyoja2rfqSk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>A new blog on Zola</title>
            <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/a-new-blog-on-zola/</link>
            <guid>https://klau.si/blog/a-new-blog-on-zola/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;a-new-blog-on-zola&#x2F;zola.ico&quot; alt=&quot;Zola logo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I converted my old blog posts from Drupal to static files and now I&#x27;m trying out &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;. The static files are hosted on &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;deployment&#x2F;github-pages&#x2F;&quot;&gt;Github Pages&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Mocking in Rust with conditional compilation</title>
            <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/mocking-in-rust-with-conditional-compilation/</link>
            <guid>https://klau.si/blog/mocking-in-rust-with-conditional-compilation/</guid>
            <description>&lt;p&gt;When writing automated unit tests for your application you will probably need to use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mock_object&quot;&gt;mocks&lt;&#x2F;a&gt; at some point. Classical object-oriented programming languages such as PHP solve this with reflection where mock object types are created during test runtime. The code under test expects a certain interface or class and the test code passes mock objects that implement the interface or are a subclass.&lt;&#x2F;p&gt;
&lt;p&gt;Similar approaches exist in Rust where mock objects are used to test code that expects a trait type. There is a wonderful &lt;a href=&quot;https:&#x2F;&#x2F;asomers.github.io&#x2F;mock_shootout&#x2F;&quot;&gt;Rust mock framework comparison&lt;&#x2F;a&gt; by Alan Somers that lists their features. The biggest problem with most of them as far as I can see is that they cannot mock a foreign &lt;code&gt;struct&lt;&#x2F;code&gt; you are using in your code. Rust does not have a concept of object inheritance for structs so there is no way to mimic a struct type from the standard library or an external crate.&lt;&#x2F;p&gt;
&lt;p&gt;One workaround for that is to refactor your code to use traits&#x2F;generics instead of concrete structs. That way the implementation is agnostic to whatever struct is used - test code can pass mocks that satisfy the expected trait bounds. The downside is that you might have to invent traits which can make your code more complex just to satisfy test requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Another solution is to use one of Rust&#x27;s powerful meta programming capabilities: &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;conditional-compilation.html&quot;&gt;conditional compilation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conditional-compilation-for-test-types&quot;&gt;Conditional compilation for test types&lt;&#x2F;h2&gt;
&lt;p&gt;This was quite a revelation to me and still blows my mind: you can just swap out a complete type during test runs! I first found this when looking at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maidsafe&#x2F;lru_time_cache&quot;&gt;lru_time_cache crate&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pcsm&#x2F;test_double&quot;&gt;test_double crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at a concrete use case as I implemented for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;goal-11&#x2F;src&#x2F;cache.rs&quot;&gt;the cache part&lt;&#x2F;a&gt; of my Rustnish project (a fork of the mentioned lru_time_cache crate). The cache has an &lt;code&gt;insert()&lt;&#x2F;code&gt; and &lt;code&gt;len()&lt;&#x2F;code&gt; method defined like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;std::time::Instant;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F;&#x2F; Inserts a key-value pair into the cache.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Key, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Value, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;expires&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Instant) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;&amp;lt;Value&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;remove_expired&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ...
    &#x2F;&#x2F; Rest of function body omitted here.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns the size of the cache, i.e. the number of cached non-expired key-value pairs.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.map
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(_, (_, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, _))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;| *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Instant::now())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whenever &lt;code&gt;len()&lt;&#x2F;code&gt; is called it has to go through all items in the cache and only count the non-expired ones (expired items are only removed in &lt;code&gt;insert()&lt;&#x2F;code&gt; calls).&lt;&#x2F;p&gt;
&lt;p&gt;How do we test this effectively? We could use &lt;code&gt;thread::sleep()&lt;&#x2F;code&gt; in test functions and check real time results, but that makes the unit test slow and dependent on thread time. How can we mock the &lt;code&gt;Instant&lt;&#x2F;code&gt; struct and associated methods instead? The secret sauce is this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; During testing we use a mock clock to be time independent.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fake_clock::FakeClock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Instant;
#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(test))]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;std::time::Instant;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;cfg&lt;&#x2F;code&gt; attribute is used here to swap in a mock &lt;code&gt;Instant&lt;&#x2F;code&gt; type whenever the tests are executed. During production compilation the normal type is used. Luckily in this case a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maidsafe&#x2F;fake_clock&quot;&gt;fake clock crate&lt;&#x2F;a&gt; already exists, so we don&#x27;t even have to write the mock code and just use it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fake_clock::FakeClock;
    FakeClock::advance_time(time);
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;expiration_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; time_to_live &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; lru_cache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;::LruCache::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;&amp;gt;::with_memory_size(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
        assert_eq!(lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(), i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;_ =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i, i, Instant::now() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; time_to_live);
        assert_eq!(lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(), i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;101&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;_ =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Instant::now() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; time_to_live);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; All old items are expired, so only the last item must remain.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;assert_eq!(lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
        assert!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
        assert_eq!(lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(), i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;_ =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i, i, Instant::now() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; time_to_live);
        assert_eq!(lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(), i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;101&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; All items are expired, so the cache must report being empty.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
    assert!(lru_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;FakeClock&lt;&#x2F;code&gt; exhibits the same methods as &lt;code&gt;Instant&lt;&#x2F;code&gt; from the standard library, so the compiler has no problem to use it as a drop-in replacement. We can manipulate the FakeClock from the outside and pretend that a certain amount of time has passed while we really just increase a counter. Super fast unit test, no waiting with a &lt;code&gt;thread::sleep()&lt;&#x2F;code&gt; needed!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integration-tests-not-affected&quot;&gt;Integration tests not affected&lt;&#x2F;h2&gt;
&lt;p&gt;&amp;quot;But Klausi!&amp;quot; you scream &amp;quot;Now your reverse proxy integration tests are broken because they will also run with the fake clock!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;No, because Rust compiles each &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;testing&#x2F;integration_testing.html&quot;&gt;integration test&lt;&#x2F;a&gt; as separate crate. It links it with your main crate, but only the integration test code has &lt;code&gt;#[cfg(test)]&lt;&#x2F;code&gt; mode on during that test run. The main crate will use the production &lt;code&gt;Instant&lt;&#x2F;code&gt; type and everything still works as before.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;downsides-of-conditional-compilation-mocks&quot;&gt;Downsides of conditional compilation mocks&lt;&#x2F;h2&gt;
&lt;p&gt;So far so good, but there are some downsides to consider with this approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can only swap in one mock implementation for all your test cases. Every test case shares the same mock code, so you need to come up with your own strategy if you need different mock behavior per test case.&lt;&#x2F;li&gt;
&lt;li&gt;Integration tests become more important to have in addition to unit tests. The unit tests run with a complete fake type, so you don&#x27;t even know if your code still compiles with the real type.&lt;&#x2F;li&gt;
&lt;li&gt;If we would not have the fake_clock crate then we would have to write all the mock code ourselves, which is not trivial. This is probably the nature of mocking in general: complex type usage results in complex mock code to replace it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As you can see there is great overlap with the general challenges of mocking, so don&#x27;t take these as arguments against conditional compilation mocks specifically.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Rust is super flexible and powerful on the topic of mocking. Conditional compilation is a next level opportunity that is simply missing in other programming languages. HTTP request mocking libraries such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lipanski&#x2F;mockito&quot;&gt;Mockito&lt;&#x2F;a&gt; are beginning to leverage this.&lt;&#x2F;p&gt;
&lt;p&gt;But there are also maturity problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are 7 competing mocking frameworks, a sign that the Rust ecosystem has not figured out yet how to do it effectively for everybody.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;1.33.0&#x2F;book&#x2F;ch11-00-testing.html&quot;&gt;official Testing documentation&lt;&#x2F;a&gt; does not even mention mocking. I assume any larger Rust program will run into mocking use cases during tests, so this is lacking. Interestingly there is a mock use case in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;1.33.0&#x2F;book&#x2F;ch15-05-interior-mutability.html#a-use-case-for-interior-mutability-mock-objects&quot;&gt;RefCell example documentation&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Drupal Austria Meetup: Drupal security learnings</title>
            <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupal-security-vulnerability-learnings/</link>
            <guid>https://klau.si/blog/drupal-security-vulnerability-learnings/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;drupal-security-vulnerability-learnings&#x2F;meetup_security.jpeg&quot; alt=&quot;Drupal Austria security meetup&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here are &lt;a href=&quot;&#x2F;presentations&#x2F;sec-learnings2019&#x2F;index.html&quot;&gt;the slides&lt;&#x2F;a&gt; of my Drupal Austria Meetup talk &amp;quot;Drupal security learnings&amp;quot;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Benchmarking a Rust web application</title>
            <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/benchmarking-a-rust-web-application/</link>
            <guid>https://klau.si/blog/benchmarking-a-rust-web-application/</guid>
            <description>&lt;p&gt;Performance testing is an important part when developing a network application - you want to know when you have a regression in request throughput in your service.&lt;&#x2F;p&gt;
&lt;p&gt;I set out out my goal 9 for Rustnish:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write benchmark code that compares runtime performance of Rustnish against
&lt;a href=&quot;https:&#x2F;&#x2F;varnish-cache.org&#x2F;&quot;&gt;Varnish&lt;&#x2F;a&gt;. Use &lt;code&gt;cargo bench&lt;&#x2F;code&gt; to execute the benchmarks.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The basic idea of a performance test here is to send many HTTP requests to the web service (the reverse proxy in this case) and measure how fast the responses arrive back. Comparing the results from Rustnish and Varnish should give us an idea if our performance expectations are holding up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;manual-performance-testing-with-apachebench&quot;&gt;Manual performance testing with ApacheBench&lt;&#x2F;h2&gt;
&lt;p&gt;A quick way to get performance feedback is to run &lt;code&gt;ab&lt;&#x2F;code&gt; against our reverse proxy. Start the server in release mode (optimized):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;cargo run --release
   Compiling rustnish v0.0.1 (file:&#x2F;&#x2F;&#x2F;home&#x2F;klausi&#x2F;workspace&#x2F;rustnish)
    Finished release [optimized] target(s) in 6.02s
     Running `target&#x2F;release&#x2F;rustnish`
Listening on http:&#x2F;&#x2F;127.0.0.1:9090
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As backend service I&#x27;m using the default Ubuntu Apache webserver running on port 80. It delivers a static default test page.&lt;&#x2F;p&gt;
&lt;p&gt;Benchmarking by sending 10k requests, 100 in parallel:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ ab -c 100 -n 10000 http:&#x2F;&#x2F;127.0.0.1:9090&#x2F;
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1807734 $&amp;gt;
...
Benchmarking 127.0.0.1 (be patient)
...
Concurrency Level:      100
Time taken for tests:   1.011 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      116200000 bytes
HTML transferred:       113210000 bytes
Requests per second:    9893.12 [#&#x2F;sec] (mean)
Time per request:       10.108 [ms] (mean)
Time per request:       0.101 [ms] (mean, across all concurrent requests)
Transfer rate:          112263.78 [Kbytes&#x2F;sec] received
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That looks quite OK!&lt;&#x2F;p&gt;
&lt;p&gt;Of course it is easy for our reverse proxy to reach this throughput: it does not do anything except passing requests through and adding its own header.&lt;&#x2F;p&gt;
&lt;p&gt;Now we install Varnish on Ubuntu:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sudo apt install varnish
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We configure it to do the sane thing as Rustnish, just passing all requests through. &#x2F;etc&#x2F;varnish&#x2F;default.vcl:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;vcl 4.0;

# Default backend definition. Set this to point to your content server.
backend default {
    .host = &amp;quot;127.0.0.1&amp;quot;;
    .port = &amp;quot;80&amp;quot;;
}

sub vcl_recv {
    return (pass);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And benchmark it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ ab -c 100 -n 10000 http:&#x2F;&#x2F;127.0.0.1:6081&#x2F;
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1807734 $&amp;gt;
...
Benchmarking 127.0.0.1 (be patient)
...
Concurrency Level:      100
Time taken for tests:   1.182 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      116553545 bytes
HTML transferred:       113210000 bytes
Requests per second:    8458.46 [#&#x2F;sec] (mean)
Time per request:       11.822 [ms] (mean)
Time per request:       0.118 [ms] (mean, across all concurrent requests)
Transfer rate:          96275.68 [Kbytes&#x2F;sec] received
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see Varnish performs slightly worse than Rustnish - which means we are on the right track! Of course Varnish has a much bigger code base with much more complexity compared to our most basic reverse proxy that just passes requests through. This difference is to be expected.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automating-benchmarks-in-code&quot;&gt;Automating benchmarks in code&lt;&#x2F;h2&gt;
&lt;p&gt;While manual testing is fine we want to automate multiple benchmark scenarios into a benchmark suite that can be executed quickly in one go. &lt;code&gt;cargo bench&lt;&#x2F;code&gt; can help us with that - &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;unstable-book&#x2F;library-features&#x2F;test.html&quot;&gt;the unstable Rust book describes what you need to do to use it&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The book has some good points of advice, one point that we are going to deliberately ignore:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make the code in the iter loop do something simple, to assist in pinpointing performance improvements (or regressions)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But we want to do a full black box performance test of our service here, so our benchmark will be an HTTP client that sends requests and measures response times. This is not a trivial thing to do with Hyper because there are no example guides of how to send requests in parallel. Here is a helper function I came up with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;bench_requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;test::Bencher, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;concurrency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;proxy_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Initialize all the Tokio runtime stuff.
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; core &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Core::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;hyper::Client::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;handle);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Target is localhost with the port of the proxy under test.
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; url: hyper::Uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;&#x2F;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, proxy_port)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; This is the benchmark loop that will be executed multiple times and
    &#x2F;&#x2F; measured.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;    b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;move || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Build a list of futures that we will execute all at once in parallel
        &#x2F;&#x2F; in the end.
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; parallel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;::new();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;concurrency {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; A future that sends requests sequentially by scheduling itself in
            &#x2F;&#x2F; a loop-like way.
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; requests_til_done &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;loop_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;| {
                client
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;| {
                        assert_eq!(
                            res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
                            hyper::StatusCode::Ok,
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Did not receive a 200 HTTP status code. Make sure Varnish is configured on port 6081 and the backend port is set to 9091 in &#x2F;etc&#x2F;varnish&#x2F;default.vcl. Make sure the backend server is running with `cargo run --example hello_9091` and Rustnish with `cargo run --release --example rustnish_9090`.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Read response body until the end.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;                        res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;_chunk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(()))
                    })
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Break condition of the future &amp;quot;loop&amp;quot;. The return values
                    &#x2F;&#x2F; signal the loop future if it should run another iteration
                    &#x2F;&#x2F; or not.
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;move |_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(amount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; concurrency) {
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Loop::Continue(counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;))
                        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Loop::Break(counter))
                        }
                    })
            });
            parallel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(requests_til_done);
        }

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; The execution should finish when all futures are done.
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; work &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(parallel);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Now run it! Up to this point no request has been sent, we just
        &#x2F;&#x2F; assembled heavily nested futures so far.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;        core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(work).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    });
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can define bench scenarios that should be measured, for example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;bench&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;c_100_requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;test::Bencher) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bench_requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;bench&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;c_100_requests_varnish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;test::Bencher) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bench_requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;6081&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The full source code with the scenarios can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;goal-09&#x2F;benches&#x2F;rustnish_vs_varnish.rs&quot;&gt;goal-09 branch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Before this benchmark can be executed we need Varnish running on port 6081 (default) and we need to start a dummy backend and our proxy server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;cargo run --release --example hello_9091
cargo run --release --example rustnish_9090
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Executing &lt;code&gt;cargo bench&lt;&#x2F;code&gt; then gives us this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;running 12 tests
test a_1_request                       ... bench:     364,246 ns&#x2F;iter (+&#x2F;- 103,690)
test a_1_request_varnish               ... bench:     389,026 ns&#x2F;iter (+&#x2F;- 63,051)
test b_10_requests                     ... bench:   1,874,980 ns&#x2F;iter (+&#x2F;- 377,843)
test b_10_requests_varnish             ... bench:   2,152,368 ns&#x2F;iter (+&#x2F;- 356,510)
test c_100_requests                    ... bench:  17,507,140 ns&#x2F;iter (+&#x2F;- 2,847,238)
test c_100_requests_varnish            ... bench:  21,896,708 ns&#x2F;iter (+&#x2F;- 5,546,318)
test d_10_parallel_requests            ... bench:   1,646,869 ns&#x2F;iter (+&#x2F;- 228,179)
test d_10_parallel_requests_varnish    ... bench:   2,012,392 ns&#x2F;iter (+&#x2F;- 426,878)
test e_100_parallel_requests           ... bench:   8,508,973 ns&#x2F;iter (+&#x2F;- 361,317)
test e_100_parallel_requests_varnish   ... bench:   9,574,347 ns&#x2F;iter (+&#x2F;- 764,147)
test f_1_000_parallel_requests         ... bench:  82,898,926 ns&#x2F;iter (+&#x2F;- 1,037,534)
test f_1_000_parallel_requests_varnish ... bench:  86,922,588 ns&#x2F;iter (+&#x2F;- 1,687,902)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool, that shows our proxy always being slightly faster than Varnish.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;observing-benchmark-regressions&quot;&gt;Observing benchmark regressions&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have established a performance base line we can change or refactor our code and check what happens to our benchmark numbers. My Rustnish project is built on the Hyper library version 0.11, let&#x27;s see what happens if I update and rewrite to Hyper 0.12 (code in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;tree&#x2F;hyper-0.12-upgrade&quot;&gt;hyper-0.12-upgrade branch&lt;&#x2F;a&gt;) and run the same benchmark:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;test a_1_request                       ... bench:     554,467 ns&#x2F;iter (+&#x2F;- 75,441)
test a_1_request_varnish               ... bench:     495,228 ns&#x2F;iter (+&#x2F;- 94,544)
test b_10_requests                     ... bench:   3,022,574 ns&#x2F;iter (+&#x2F;- 1,797,736)
test b_10_requests_varnish             ... bench:   2,755,437 ns&#x2F;iter (+&#x2F;- 500,961)
test c_100_requests                    ... bench:  27,405,520 ns&#x2F;iter (+&#x2F;- 2,611,418)
test c_100_requests_varnish            ... bench:  24,964,495 ns&#x2F;iter (+&#x2F;- 3,385,641)
test d_10_parallel_requests            ... bench:   5,712,737 ns&#x2F;iter (+&#x2F;- 11,442,635)
test d_10_parallel_requests_varnish    ... bench:   1,684,061 ns&#x2F;iter (+&#x2F;- 264,177)
test e_100_parallel_requests           ... bench:  25,301,274 ns&#x2F;iter (+&#x2F;- 35,737,625)
test e_100_parallel_requests_varnish   ... bench:   8,721,555 ns&#x2F;iter (+&#x2F;- 897,422)
test f_1_000_parallel_requests         ... bench:  69,946,899 ns&#x2F;iter (+&#x2F;- 36,979,491)
test f_1_000_parallel_requests_varnish ... bench:  76,219,659 ns&#x2F;iter (+&#x2F;- 10,381,027)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ouch, that is quite a heavy performance regression! Some observations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Varnish is now faster in almost all scenarios - which probably means that there is a performance regression in our reverse proxy.&lt;&#x2F;li&gt;
&lt;li&gt;Serial requests seem to get processed slower now. That could indicate a regression in the Hyper example server or in our Hyper client code.&lt;&#x2F;li&gt;
&lt;li&gt;There are huge timing deviations between benchmark iterations when Rustnish is used. Could point to some inefficiency when many requests are handled at the same time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Automated benchmarks are great when you want to track the performance of your application over time. &lt;code&gt;cargo bench&lt;&#x2F;code&gt; is useful, unfortunately it is only available on Rust Nightly. The biggest challenge when doing a big black box performance test is to isolate the cause once you have determined a performance regression. Why and where is it happening? Is it really the application or the benchmark code? Can I reproduce the behavior with manual performance testing?&lt;&#x2F;p&gt;
&lt;p&gt;The Hyper library does not seem to be a good fit for me when writing a reverse proxy. After finding a &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;testing-memory-leaks-in-rust&#x2F;&quot;&gt;memory leak&lt;&#x2F;a&gt;, a &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;crashing-a-rust-hyper-server-with-a-denial-of-service-attack&#x2F;&quot;&gt;denial of service weakness&lt;&#x2F;a&gt; and now this performance regression I think it is time to try another framework next.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update 2018-09-07:&lt;&#x2F;strong&gt; seanmonster has some good insights about multi-threading performance in &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;9bukvy&#x2F;blog_post_benchmarking_a_rustlang_web_application&#x2F;e56484j&quot;&gt;their Reddit comments&lt;&#x2F;a&gt;. I was able to get Rustnish benchmark numbers ahead of Varnish again, but only by setting Tokio to be single-threaded. So in my single computer (but 4 CPU core) scenario Hyper is only able to compete with Varnish if we eliminate Tokio multithreading. The question remains: Varnish is multithreaded with 2 threadpools and potentially very many threads, why can it handle that so much better than Tokio?&lt;&#x2F;p&gt;
&lt;p&gt;I also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;actix-web-test&#x2F;src&#x2F;lib.rs&quot;&gt;quickly tested actix-web&lt;&#x2F;a&gt; as a replacement for Hyper, but that delivered even worse benchmark results. I think I&#x27;ll stick to Hyper for now :-)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Crashing a Rust Hyper server with a Denial of Service attack</title>
            <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/crashing-a-rust-hyper-server-with-a-denial-of-service-attack/</link>
            <guid>https://klau.si/blog/crashing-a-rust-hyper-server-with-a-denial-of-service-attack/</guid>
            <description>&lt;p&gt;I&#x27;m writing a reverse proxy in Rust using &lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&#x2F;&quot;&gt;Hyper&lt;&#x2F;a&gt; and I want
to measure performance a bit to know if I&#x27;m doing something terribly wrong. By
doing that I discovered a Denial of Service vulnerability in Hyper when IO
errors are not properly handled. Note that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;releases&#x2F;tag&#x2F;v0.11.20&quot;&gt;a workaround has been released in
the meantime in Hyper
0.11.20&lt;&#x2F;a&gt;, more
background info can be found in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;issues&#x2F;1358&quot;&gt;this Hyper
issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-vulnerable-hello-world-server-example&quot;&gt;A vulnerable Hello world server example&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s look at the simplest Hyper server example that just serves &amp;quot;Hello world&amp;quot;
HTTP responses
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;blob&#x2F;v0.11.19&#x2F;examples&#x2F;hello.rs&quot;&gt;source&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PHRASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; new_service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;const_service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;service_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|_| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Response::&amp;lt;hyper::Body&amp;gt;::new()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(ContentLength(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PHRASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;))
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(ContentType::plaintext())
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PHRASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;))
    }));

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Http::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;addr, new_service).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Listening on http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt; with 1 thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;local_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last call to &lt;code&gt;server.run()&lt;&#x2F;code&gt; will block and the program will continue to run
until terminated. At least that is what we expect to happen here.&lt;&#x2F;p&gt;
&lt;p&gt;This example is included with the Hyper library and you can run the vulnerable
version directly from there:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;git clone --branch v0.11.19 https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper.git
cd hyper
cargo run --example hello
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;using-apachebench-to-attack-the-server&quot;&gt;Using ApacheBench to attack the server&lt;&#x2F;h2&gt;
&lt;p&gt;My go to tool for load testing is
&lt;a href=&quot;https:&#x2F;&#x2F;httpd.apache.org&#x2F;docs&#x2F;2.4&#x2F;programs&#x2F;ab.html&quot;&gt;ApacheBench&lt;&#x2F;a&gt;, a simple
command line tool for HTTP request testing. I played a bit with the command
line options and made the number of concurrent requests a bit too high by
mistake:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ ab -r -c 10000 -n 1000000 http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;
Benchmarking 127.0.0.1 (be patient)
socket: Too many open files (24)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ah yes, 10k requests in parallel will probably not work because the &lt;code&gt;ab&lt;&#x2F;code&gt;
process is only allowed to open a certain amount of ports. Let&#x27;s check the
limits for a Linux process running under my user account:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 30562
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 30562
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only 1024 open files&#x2F;ports allowed.&lt;&#x2F;p&gt;
&lt;p&gt;When I checked back on my Hyper server I was surprised to find it dead for the
same reason:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Listening on http:&#x2F;&#x2F;127.0.0.1:3000 with 1 thread.
thread &amp;#39;main&amp;#39; panicked at &amp;#39;called `Result::unwrap()` on an `Err` value: Io(Os {
code: 24, kind: Other, message: &amp;quot;Too many open files&amp;quot; })&amp;#39;, libcore&#x2F;result.rs:945:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oops, that is not good. A HTTP server should not just exit when a flood of HTTP
requests comes in. It needs to be resilient and keep running at all times. You
could argue that the open file limit simply must be configured to a higher
value for production use. That way the problem can be postponed to even larger
request volumes, but then the problem is the same: the server will abort and
die.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-naive-fix-with-a-loop&quot;&gt;A naive fix with a loop&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; new_service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;const_service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;service_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|_| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Response::&amp;lt;hyper::Body&amp;gt;::new()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(ContentLength(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PHRASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;))
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(ContentType::plaintext())
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PHRASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;))
    }));

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Http::new()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;addr, new_service)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Listening on http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt; with 1 thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;local_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, e);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &amp;quot;works&amp;quot; in the sense that the server does not die and just restarts
itself. The problem with this approach is that other connections are dropped
when an IO error occurs, causing a service interruption.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-fix-in-hyper&quot;&gt;The fix in Hyper&lt;&#x2F;h2&gt;
&lt;p&gt;In order to fix this in Hyper itself I contributed
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hyper&#x2F;0.11.22&#x2F;hyper&#x2F;server&#x2F;struct.Http.html#method.sleep_on_errors&quot;&gt;&lt;code&gt;sleep_on_errors()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Starting a HTTP server with that setting will
swallow IO errors internally and library users do not have to worry about it.
In the case of &amp;quot;Too many open files&amp;quot; errors the server will just wait 10ms
before trying to accept the TCP connection again, hoping that free ports have
become available in the meantime.&lt;&#x2F;p&gt;
&lt;p&gt;This setting is currently (Hyper v0.11.22) disabled by default and you must
enable it like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Http::new()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;sleep_on_errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;addr, new_service)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Listening on http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt; with 1 thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;local_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Future versions of Hyper (probably starting with 0.12.x) will enable this
setting per default to have a better developer experience. Progress is tracked
in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;issues&#x2F;1455&quot;&gt;this issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks a lot to Paul Colomiets (the fix was copied from their
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tailhook&#x2F;tk-listen&quot;&gt;tk-listen&lt;&#x2F;a&gt; library) and Sean McArthur
for helping me understand and fix this problem!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Coming from a PHP background I&#x27;m not used to thinking about or handling IO
errors. That is all handled by well tested web servers like Apache and Nginx,
while I only care about application specific code in PHP. Using a low level
library such as Hyper exposes more than just request&#x2F;response handling. Maybe
using a higher level framework such as &lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&#x2F;&quot;&gt;Rocket&lt;&#x2F;a&gt; even for
the most basic use case (such as my proxy) is a safer choice.&lt;&#x2F;p&gt;
&lt;p&gt;I think that a HTTP server API such as Hyper should be secure by default and
prevent server exits where possible. We will get there hopefully!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Testing memory leaks in Rust</title>
            <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/testing-memory-leaks-in-rust/</link>
            <guid>https://klau.si/blog/testing-memory-leaks-in-rust/</guid>
            <description>&lt;p&gt;Rust has many built-in concepts for memory safety, but it cannot prevent
application level logic errors that take up system memory. An example would be
a server application that stores something for each incoming request in a
growing collection or list. If the program does not clean up the growing list
then it will take up more and more server memory - thereby exposing a memory
leak.&lt;&#x2F;p&gt;
&lt;p&gt;While working on my reverse proxy project I discovered such a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;issues&#x2F;1315&quot;&gt;leak in the HTTP
library Hyper&lt;&#x2F;a&gt;. In order to
prevent and detect memory leaks in the future I set out my goal 7:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add an integration test that ensures that the proxy server is not leaking
memory (growing RAM usage without shrinking again). Use &#x2F;proc information to
compare memory usage of the current process before and after the test.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;finding-memory-leaks-manually-first&quot;&gt;Finding memory leaks manually first&lt;&#x2F;h2&gt;
&lt;p&gt;A very primitive way of inspecting the memory usage of a program is &lt;code&gt;ps&lt;&#x2F;code&gt; on
Linux. First we start our Rustnish reverse proxy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;cargo run --release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then get the memory information from ps for rustnish in a new terminal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ ps aux | grep &amp;#39;[r]ustnish&amp;#39;
klausi    3840  0.0  0.0  38504  7832 pts&#x2F;0    Sl+  17:56   0:00 target&#x2F;release&#x2F;rustnish
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The 6th column is the resident memory usage in kilobytes. Which means our
server process is taking up ~8MB in RAM right now.&lt;&#x2F;p&gt;
&lt;p&gt;Now we want to see how our server is doing after it had to deal with a lot of
requests. A tool for that is Apache Bench, which is used for load testing on
servers. Installation on Ubuntu for example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sudo apt-get install apache2-utils
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then fire 1 million requests at our reverse proxy, 4 requests concurrently:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;ab -c 4 -n 1000000 http:&#x2F;&#x2F;localhost:9090&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now running ps again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ ps aux | grep &amp;#39;[r]ustnish&amp;#39;
klausi    3840 47.8  3.6 304836 283588 pts&#x2F;0   Sl+  18:15   2:04 target&#x2F;release&#x2F;rustnish
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wow, the 6th column is now showing 283,588KB which is ~278MB, something is
definitely very wrong here!&lt;&#x2F;p&gt;
&lt;p&gt;Luckily I could track down the problem pretty quick to the Hyper library and
after reporting it to the author he committed a fix. Thanks Sean McArthur!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automating-a-memory-leak-test&quot;&gt;Automating a memory leak test&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Update 2018-01-07: It turns out that the automated test described here is unstable and has random test fails. Procinfo is probably not exact enough, so this does not work reliably.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now that the memory leak is fixed we want to make sure it does not happen
again. We can setup an integration test that runs on Travis CI whenever code is
changed. The strategy for such a test is similar to what we did manually:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Start the reverse proxy.&lt;&#x2F;li&gt;
&lt;li&gt;Measure the memory footprint.&lt;&#x2F;li&gt;
&lt;li&gt;Make a large amount of requests against the proxy, similar to what Apache
Bench does.&lt;&#x2F;li&gt;
&lt;li&gt;Measure the memory footprint again.&lt;&#x2F;li&gt;
&lt;li&gt;Assert that memory usage is below a certain threshold.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The biggest problem is that Rust has no built-in function to get memory usage
information of the current program (in PHP there is for example
&lt;a href=&quot;http:&#x2F;&#x2F;php.net&#x2F;manual&#x2F;en&#x2F;function.memory-get-usage.php&quot;&gt;&lt;code&gt;memory_get_usage()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;).
The closest thing is the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;procinfo&quot;&gt;procinfo&lt;&#x2F;a&gt; crate,
which uses memory information from &#x2F;proc on Linux. This is of course platform
dependent and can for example not work on MacOS or Windows.&lt;&#x2F;p&gt;
&lt;p&gt;The full test can be found in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;goal-07&#x2F;tests&#x2F;memory_leaks.rs&quot;&gt;memory_leaks.rs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Getting the current memory usage (resident number of kilobytes in RAM):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; procinfo;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; memory_before &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;procinfo::pid::statm_self().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().resident;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Emulating Apache Bench and sending 30K requests, 4 at a time:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; core &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Core::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Client::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; url: Uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; nr_requests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;30_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; concurrency &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; parallel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;concurrency {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; requests_til_done &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;loop_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Request::new(Method::Get, url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
        request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;set_version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(hyper::HttpVersion::Http10);
        client
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(request)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;move |_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, hyper::Error&amp;gt; {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(nr_requests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; concurrency) {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Loop::Continue(counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;))
                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Loop::Break(counter))
                }
            })
    });
    parallel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(requests_til_done);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; work &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(parallel);
core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(work).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are building 4 loop futures here with the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;*&#x2F;futures&#x2F;future&#x2F;fn.loop_fn.html&quot;&gt;&lt;code&gt;loop_fn()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
construct, each iteration sending one request. The 4 futures are executed in
parallel and we wait with a
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;*&#x2F;futures&#x2F;future&#x2F;fn.join_all.html&quot;&gt;&lt;code&gt;join_all()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
future until they all are finished.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this is test code, that&#x27;s why there are lots of &lt;code&gt;unwrap()&lt;&#x2F;code&gt; calls
because we don&#x27;t care about errors (I have &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;replacing-unwrap-and-avoiding-panics-in-rust&#x2F;&quot;&gt;written about &lt;code&gt;unwrap()&lt;&#x2F;code&gt; before&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;As always the hardest part about assembling futures is to get the type
spaghetti right. &lt;code&gt;loop_fn()&lt;&#x2F;code&gt; has 4 (!!!) generic type parameters, so writing
and reasoning about it takes quite some time. As you can see there is a
&lt;code&gt;hyper::Error&lt;&#x2F;code&gt; type in there because the compiler would greet me with this if I
leave out all type decalrations:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;error[E0282]: type annotations needed
  --&amp;gt; tests&#x2F;memory_leaks.rs:48:21
   |
40 |     let mut parallel = Vec::new();
   |         ------------ consider giving `parallel` a type
...
48 |                     Ok(Loop::Continue(counter + 1))
   |                     ^^ cannot infer type for `E`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What &lt;code&gt;E&lt;&#x2F;code&gt;? I&#x27;m not even using any error type in the code here, how would I know?
And the compiler is asking me to annotate the type of my list of futures, which
is ... difficult. It is a vector of loop futures, each of them having 4 type
parameters, each iteration having a Hyper client request future and the loop
iteration future. Writing out that type spaghetti code is not something I can
do, so instead I have annotated the inner return type of the loop iteration
future. That is the other place where the compiler is complaining and where I
can do something about it. The &lt;code&gt;_&lt;&#x2F;code&gt; type placeholder lets me conveniently ignore
types I don&#x27;t care about and I just specify the only error type I think is
relevant in my code: the &lt;code&gt;hyper::Error&lt;&#x2F;code&gt; that can be returned by a client
request.&lt;&#x2F;p&gt;
&lt;p&gt;After solving that I can successfully run my test and demonstrate the memory
leak on Hyper version 0.11.2 and that it is fixed in 0.11.4. Here is what the
fail looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ cargo test --test memory_leaks
running 1 test
Listening on http:&#x2F;&#x2F;127.0.0.1:9090
test test_memory_after_30_000_requests ... FAILED

failures:

---- test_memory_after_30_000_requests stdout ----
    thread &amp;#39;test_memory_after_30_000_requests&amp;#39; panicked at &amp;#39;Memory usage at
    server start is 1551KB, memory usage after 30000 requests is 7098KB&amp;#39;,
    tests&#x2F;memory_leaks.rs:63:4
note: Run with `RUST_BACKTRACE=1` for a backtrace.


failures:
    test_memory_after_30_000_requests

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

error: test failed, to rerun pass &amp;#39;--test memory_leaks&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Very good, now the tests will fail if the server should expose a similar memory
leak in the future! The downside of this test is that it is a bit slow to
execute (because it makes so many requests) - it takes about 22 seconds on my
desktop computer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;limiting-the-test-to-run-on-linux-only&quot;&gt;Limiting the test to run on Linux only&lt;&#x2F;h2&gt;
&lt;p&gt;The problem with using &lt;code&gt;procinfo&lt;&#x2F;code&gt; is that it is only available on the Linux
platform - so running this test on other operating systems will not work (the
&lt;code&gt;procinfo&lt;&#x2F;code&gt; crate does not even compile on MacOS for example). I am &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;goal-07&#x2F;.travis.yml&quot;&gt;using
Travis CI&lt;&#x2F;a&gt; to also
run the tests on MacOS, so I need a platform specific exception to skip this
test.&lt;&#x2F;p&gt;
&lt;p&gt;We can use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;first-edition&#x2F;conditional-compilation.html&quot;&gt;conditional compilation&lt;&#x2F;a&gt; for that.&lt;&#x2F;p&gt;
&lt;p&gt;Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# Memory Leak tests require procinfo, which only works on Linux.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;[target.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;cfg(target_os=&amp;quot;linux&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.dev-dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;procinfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;&amp;gt;=0.4.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the beginning of the test file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; This test uses procinfo, so can only be run on Linux.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(target_os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;linux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That means the test case is not even compiled on other platforms, so it does
not show up as test for the test runner, so it never gets executed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Testing for the memory footprint of a Rust server application is important to
detect regressions when developing it.&lt;&#x2F;p&gt;
&lt;p&gt;Advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As an integration test this approach treats the server application as black
box. Whatever refactoring you do - the test case does not care and just covers
the memory usage.&lt;&#x2F;li&gt;
&lt;li&gt;The test works as automated benchmarking tool. Instead of manually examining
the runtime performance of you application this is directly built into
automated test execution.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using the &lt;code&gt;procinfo&lt;&#x2F;code&gt; crate is not ideal because it is platform dependent
(Linux). Please let me know if there is a Rust crate that measures memory
independently!&lt;&#x2F;li&gt;
&lt;li&gt;The test hard-codes a specific amount of memory that is allowed to be used.
That means the test is prone to random test fails when the memory footprint of
the server application increases deliberately. In that case the test case will
need to be adjusted and fine-tuned as well.&lt;&#x2F;li&gt;
&lt;li&gt;Test execution time is long. Performing 30k requests takes time, so this test
is annoying when doing development to just check if everything is still
working. A solution to that would be excluding the test from normal &lt;code&gt;cargo test&lt;&#x2F;code&gt; runs and invoking the test explicitly on Continues Integration tools.&lt;&#x2F;li&gt;
&lt;li&gt;Memory measuring of a test run is fuzzy and not deterministic. That is why we
have to do such a large amount of test requests - to detect a significant
change in memory that is not caused by other noise.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So while there is a lot of imperfection in this test approach I think it is
still very practical and useful.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Static variables made thread-safe in Rust</title>
            <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/static-variables-made-thread-safe-in-rust/</link>
            <guid>https://klau.si/blog/static-variables-made-thread-safe-in-rust/</guid>
            <description>&lt;p&gt;When writing &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;writing-integration-tests-in-rust&#x2F;&quot;&gt;integration tests for my Rustnish reverse proxy project&lt;&#x2F;a&gt; I
have hard-coded port numbers in tests. This is not ideal because it is hard to
keep track of which port numbers have already been used and which ones are
available when writing a new test. Because Rust&#x27;s test runner &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch11-02-running-tests.html#running-tests-in-parallel-or-consecutively&quot;&gt;executes test cases in parallel&lt;&#x2F;a&gt; it is important to coordinate
which test uses which ports so that there are no clashes that break the tests.&lt;&#x2F;p&gt;
&lt;p&gt;One obvious solution to this problem would be to disable parallel test
execution with &lt;code&gt;cargo test -- --test-threads=1&lt;&#x2F;code&gt;. But we want to cover program
and test isolation with our test so this is not really an option.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-naive-try&quot;&gt;A naive try&lt;&#x2F;h2&gt;
&lt;p&gt;The basic idea is to have a function &lt;code&gt;get_free_port()&lt;&#x2F;code&gt; that hands out port
numbers incrementally and is called by tests:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;get_free_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We initialize with the number 9090 here and return an incremented number for
each call. The compiler doesn&#x27;t seem to like it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;error[E0133]: use of mutable static requires unsafe function or block
  --&amp;gt; tests&#x2F;common&#x2F;mod.rs:99:5
   |
99 |     PORT_NR += 1;
   |     ^^^^^^^ use of mutable static
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler is saving me from a race condition here. Since tests are executed
concurrently 2 tests could enter this function at the same time. One increments
the port number, but before returning the operating system hands over execution
to the second test thread which also increments the port number. Now both calls
suddenly would return the same port number, which is exactly what we want to
avoid.&lt;&#x2F;p&gt;
&lt;p&gt;We need to isolate the calls to this function or access to the static shared
variable. In Java we would use the &lt;code&gt;synchronize&lt;&#x2F;code&gt; keyword on the function
definition to ensure that only one thread can enter it at a time. But Rust uses
more primitive synchronization constructs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;protecting-static-variables-with-atomicusize&quot;&gt;Protecting static variables with AtomicUsize&lt;&#x2F;h2&gt;
&lt;p&gt;The standard library has some &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;atomic&#x2F;&quot;&gt;good documentation about synchronized atomic
access&lt;&#x2F;a&gt; that we can use.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;get_free_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: AtomicUsize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;ATOMIC_USIZE_INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;compare_and_swap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Ordering::SeqCst);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch_add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Ordering::SeqCst) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This works, but is a bit annoying:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We have to initialize the static variable with &lt;code&gt;ATOMIC_USIZE_INIT&lt;&#x2F;code&gt; instead
of our desired value 9090. If you try&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: AtomicUsize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;AtomicUsize::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then the compiler will complain:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;error: const fns are an unstable feature
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;   --&amp;gt; tests&#x2F;common&#x2F;mod.rs:98:35
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;   |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;98 |     static PORT_NR: AtomicUsize = AtomicUsize::new(9090);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;   |                                   ^^^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;   |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;   = help: in Nightly builds, add `#![feature(const_fn)]` to the crate attributes to enable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We don&#x27;t want to depend on the nightly compiler, so this is not possible
right now.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;compare_and_swap()&lt;&#x2F;code&gt; call is only necessary because we could not
directly initialize our value to 9090. It is executed on every call to
&lt;code&gt;get_free_port()&lt;&#x2F;code&gt; and is just a waste of execution time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I have no idea what &lt;code&gt;Ordering::SeqCst&lt;&#x2F;code&gt; means. &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;atomic&#x2F;enum.Ordering.html&quot;&gt;The
documentation&lt;&#x2F;a&gt;
says that this variant is the most restrictive one but I don&#x27;t know if this is
necessary or ideal in my use case. I&#x27;m using it because it is used in the docs
example  ¯\_(ツ)_&#x2F;¯&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We have to cast to &lt;code&gt;u16&lt;&#x2F;code&gt; in the end because there is only an &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt;
type but no &lt;code&gt;AtomicU16&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;postponing-the-offset-calculation&quot;&gt;Postponing the offset calculation&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to a &lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;how-do-you-access-static-variables-in-a-thread-safe-manner&#x2F;12792&#x2F;2&quot;&gt;tip from Steven Fackler&lt;&#x2F;a&gt;
we can postpone our offset to the very end:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;get_free_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: AtomicUsize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;ATOMIC_USIZE_INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;PORT_NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch_add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, Ordering::SeqCst) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That way we can remove the initialization condition and always operate on a
fixed offset of 9090. This is still not super intuitive because the initial
value of our counter is at the very end which makes this function hard to read.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Rust is great at detecting race conditions at compile time and helps you do the
right thing with static variables. The solution to synchronize concurrent
access with atomics feels a bit clumsy and there might be a better way that I
have not discovered yet.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Replacing unwrap() and avoiding panics in Rust</title>
            <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/replacing-unwrap-and-avoiding-panics-in-rust/</link>
            <guid>https://klau.si/blog/replacing-unwrap-and-avoiding-panics-in-rust/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html#method.unwrap&quot;&gt;&lt;code&gt;unwrap()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a useful tool in Rust but is also bad practice in production code that
should not abort with unpredictable panics.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore my goal 4 for Rustnish is full integration tests with no panics
allowed:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Expand the integration tests to confirm that the reverse proxy is working as
expected. Add tests with broken HTTP requests to cover error handling of the
reverse proxy. All &lt;code&gt;unwrap()&lt;&#x2F;code&gt; calls in none test code should be removed
and covered by proper error handling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You can find all the code in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;tree&#x2F;goal-04&quot;&gt;the goal-04 branch on
Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-case-for-unwrap-in-tests&quot;&gt;The case for unwrap() in tests&lt;&#x2F;h2&gt;
&lt;p&gt;Before we look at solutions how to replace &lt;code&gt;unwrap()&lt;&#x2F;code&gt; I would like to
emphasize that it absolutely has its place in automated test cases. In a test
case we do not fear panics triggered by unwrap() because the test runner will
catch them and just mark the test run as failed. That means we can be super
lazy when writing test code and use &lt;code&gt;unwrap()&lt;&#x2F;code&gt; all the time. For example
using a Hyper client in tests:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Since it so complicated to make a client request with a Tokio core we have
&#x2F;&#x2F; this helper function.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;client_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Uri) -&amp;gt; Response {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; core &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Core::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Client::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; work &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(url).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(response));
    core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(work).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This helper function issues a GET request and returns a Response struct - we
don&#x27;t care if something goes wrong (e.g. network problems or the server does
not exist). In case of an error the function will panic, we will see a panic
backtrace in the test output and the test is marked as failed. Otherwise we can
directly work with the returned Response omitting any error handling and
keeping the test code minimal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;user-input-errors&quot;&gt;User input errors&lt;&#x2F;h2&gt;
&lt;p&gt;You might have introduced &lt;code&gt;unwrap()&lt;&#x2F;code&gt; calls during quickly prototyping your
application, but the underlying error case should be communicated back to the
application user. For example in my reverse proxy the user provided Host header
is used:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.upstream_port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request_uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the user supplies a bad Host header then this will cause a panic on the
server and the user will get no response. The solution is to handle the error
and report back a response to the user:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_string_uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.upstream_port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request_uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_string_uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(u) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; u,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Either::A(futures::future::ok(
            Response::new()
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(StatusCode::BadRequest)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Invalid host header in request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;),
        ));
    }
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is certainly application specific how you process the error, but a
&lt;code&gt;match()&lt;&#x2F;code&gt; expression is likely to be useful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;error-chains&quot;&gt;Error chains&lt;&#x2F;h2&gt;
&lt;p&gt;If you are dealing with more severe error conditions then it makes sense to
bubble them up with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;error-chain&quot;&gt;error-chain&lt;&#x2F;a&gt;
crate. Instead of crashing your application with a panic you can pass up error
state to the caller of your code and they can inspect it. &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;error-chain&quot;&gt;The error-chain
documentation&lt;&#x2F;a&gt; has some further explanation and
reasoning behind it.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s consider an example: if a caller wants to start the reverse proxy on a
port that is already occupied then that will cause an error we want to bubble
up instead of panicking:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;thread::Builder::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;move || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... some not so relevant code here.
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listener &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;addr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;handle).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... some more code here.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;})
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need to follow a couple of steps for the first error chain setup:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;error-chain = &amp;quot;*&amp;quot;&lt;&#x2F;code&gt; to Cargo.toml&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add the error_chain!() macro to your code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; error_chain;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;errors {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Create the Error, ErrorKind, ResultExt, and Result types
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;    error_chain!{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Change the return type of your function to &lt;code&gt;Result&lt;&#x2F;code&gt; so that it can
return errors. Note: a convention in Rust is that Results must be used instead
of directly returning error types (even if there is an empty &lt;code&gt;Ok&lt;&#x2F;code&gt; type.)
See the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;index.html&quot;&gt;result module docs&lt;&#x2F;a&gt;
for an explanation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;chain_err()&lt;&#x2F;code&gt; to pass along errors and &lt;code&gt;bail!()&lt;&#x2F;code&gt; to create new
errors.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That way we can convert our &lt;code&gt;unwrap()&lt;&#x2F;code&gt; calls into this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;thread::Builder::new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;move || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;&amp;lt;()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... some not so relevant code here.
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listener &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;address, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;handle)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;chain_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|| format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Failed to bind server to address &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, address))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... some more code here.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;})
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;chain_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Spawning server thread failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We introduced the empty &lt;code&gt;Result&amp;lt;()&amp;gt;&lt;&#x2F;code&gt; as return type and use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-&quot;&gt;the &lt;code&gt;?&lt;&#x2F;code&gt; operator&lt;&#x2F;a&gt; to early return errors.&lt;&#x2F;p&gt;
&lt;p&gt;By adding a new error to the error chain we give meaning and context where and
how the error occurred - which makes it easier to get to the problem when
diagnosing errors. The output of such an error chain looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Error: The server thread stopped with an error
Caused by: Failed to bind server to address 127.0.0.1:3306
Caused by: Address already in use (os error 98)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now this is much more useful than just the last error - with the help of an
error chain we know which port is already in use.&lt;&#x2F;p&gt;
&lt;p&gt;The consumer that gets an error chain returned can iterate through it, inspect
and examine it. For example in test code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; error_chain &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;rustnish::start_server_blocking(port, upstream_port)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
assert_eq!(
    error_chain.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;The server thread stopped with an error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; error_chain.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
assert_eq!(
    second.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Failed to bind server to address 127.0.0.1:3306&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; third &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
assert_eq!(third.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Address already in use (os error 98)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;unwrap()&lt;&#x2F;code&gt; is your friend in test code where panics are allowed. Error
chains are a powerful concept of handling errors by providing better context.
They are comparable to exception handling in languages such as PHP and Java.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Converting a Hyper server to Tokio</title>
            <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/converting-a-hyper-server-to-tokio/</link>
            <guid>https://klau.si/blog/converting-a-hyper-server-to-tokio/</guid>
            <description>&lt;p&gt;Since my &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;getting-started-with-rust&#x2F;&quot;&gt;first blog post where I constructed a server with Hyper&lt;&#x2F;a&gt; some time
has passed and there is now a new version of the library that is based on
&lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&quot;&gt;Tokio&lt;&#x2F;a&gt;. My goal 3:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A new version of the Hyper library has been released which is
based on the Tokio library. Convert the existing code to use that new version
and provide one integration test case.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Tokio handles input&#x2F;output asynchronously, which makes setting up a server more
complicated. The benefit is more efficient parallel execution with a
non-blocking event loop.&lt;&#x2F;p&gt;
&lt;p&gt;You can find all the code in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;tree&#x2F;goal-03&quot;&gt;the goal-03 branch on
Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;upgrading-hyper&quot;&gt;Upgrading Hyper&lt;&#x2F;h2&gt;
&lt;p&gt;Hyper is already registered in the Cargo.toml file as a project dependency, so
there is only one step to update:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;cargo update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will download the new Hyper library version and change the version number
in Cargo.lock.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;converting-handler-to-service&quot;&gt;Converting Handler to Service&lt;&#x2F;h2&gt;
&lt;p&gt;Old code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Proxy {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;upstream_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Proxy {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Request, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Response) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Function body omitted here.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;New code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Proxy {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;upstream_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Client&amp;lt;HttpConnector&amp;gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Proxy {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Request;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Response;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;hyper::Error;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Either&amp;lt;FutureResult&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Response, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Error&amp;gt;,
        FutureResponse&amp;gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Request) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Future {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Function body omitted here.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first thing you&#x27;ll notice is that the Proxy struct has an additional field
to hold a Hyper client instance. This is a bit of an implementation detail of
my specific reverse proxy use case here. Since I&#x27;m using a Hyper server and a
Hyper client at the same time in my program I want them to run on the same
Tokio core (the event loop). Which means that I need to pre-construct my HTTP
client and &amp;quot;inject&amp;quot; it into my Proxy service.&lt;&#x2F;p&gt;
&lt;p&gt;The types of the Service determine what kind of requests and responses go in
and out of it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-word-on-futures&quot;&gt;A word on Futures&lt;&#x2F;h2&gt;
&lt;p&gt;A Future is a result of an operation that will be available later. You can
think of callbacks or the concept of a Promise in JavaScript. Execution is
non-blocking:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In the old &lt;code&gt;handle()&lt;&#x2F;code&gt; function the execution time is directly spent there
assembling and preparing the response and returning it once everything is done.&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;code&gt;call()&lt;&#x2F;code&gt; function runs through more quickly. Anything that
requires further input&#x2F;output (fetching with the HTTP client in our case) is
postponed as Future and the function returns immediately.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The hardest part is to get the Future type right. In our case we can have 2
different kinds of responses: direct responses if the client request is wrong
in any way and upstream responses that come out of our HTTP client invocation.
We can use the &lt;code&gt;Either&lt;&#x2F;code&gt; helper Future to combine those 2 Future types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starting-a-server-and-sharing-a-tokio-core&quot;&gt;Starting a server and sharing a Tokio core&lt;&#x2F;h2&gt;
&lt;p&gt;Old code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;start_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;upstream_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) -&amp;gt; Listening {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; address &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;127.0.0.1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Server::http(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;address).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listening &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; server
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(Proxy { upstream_port: upstream_port })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Listening on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, address);

    listening
}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; port: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_port: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _listening &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;rustnish::start_server(port, upstream_port);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;New code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;start_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;upstream_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) -&amp;gt; thread::JoinHandle&amp;lt;()&amp;gt; {

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;thread::Builder::new()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;rustnish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;move || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; address &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;127.0.0.1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Listening on http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, address);
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; address.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Prepare a Tokio core that we will use for our server and our
            &#x2F;&#x2F; client.
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; core &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Core::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; http &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Http::new();
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listener &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;addr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;handle).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Client::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;handle);

            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listener
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(sock, addr)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
                    http.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind_connection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;handle,
                                         sock,
                                         addr,
                                         Proxy {
                                             upstream_port: upstream_port,
                                             client: client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
                                         });
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(())
                });

            core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(server).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

    thread
}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; port: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_port: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;rustnish::start_server(port, upstream_port);
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we went from 15 lines of code to 40 lines of code. What happened?&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;core.run(server)&lt;&#x2F;code&gt; is starting the event loop and blocking. That&#x27;s why
we need to set up our own thread handling. Inspired by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;blob&#x2F;master&#x2F;tests&#x2F;server.rs#L583&quot;&gt;Hyper test
code&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The Hyper server would create its own internal Tokio core event loop when
using &lt;code&gt;http.bind()&lt;&#x2F;code&gt;. But we need our event loop beforehand to initialize
our HTTP client. That&#x27;s why we need the complicated setup with
&lt;code&gt;Core::new()&lt;&#x2F;code&gt; and &lt;code&gt;TcpListener&lt;&#x2F;code&gt; and &lt;code&gt;http.bind_connection()&lt;&#x2F;code&gt; to
pass in an existing event loop handle.&lt;&#x2F;li&gt;
&lt;li&gt;We want to return something useful (non-blocking) to the consumer that calls
our &lt;code&gt;start_server()&lt;&#x2F;code&gt; function. We have spawned a thread so our &lt;code&gt;main()&lt;&#x2F;code&gt;
consumer can just wait indefinitely on the thread by calling &lt;code&gt;join()&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;converting-the-response-handling&quot;&gt;Converting the response handling&lt;&#x2F;h2&gt;
&lt;p&gt;This is where the new version of the Hyper library shines. The request and
response types are now unified: a HTTP client response is the same as a HTTP
server response! This is very useful in our reverse proxy use case where we can
just pass through responses as is.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m omitting &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;goal-02&#x2F;src&#x2F;lib.rs#L35&quot;&gt;my old Hyper
code&lt;&#x2F;a&gt; here
because it is quite convoluted and long. The new code is so much nicer:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Proxy {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Request;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Response;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;hyper::Error;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Either&amp;lt;FutureResult&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Response, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Error&amp;gt;,
        FutureResponse&amp;gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Request) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Future {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().get::&amp;lt;Host&amp;gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Either::A(futures::future::ok(Response::new()
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(StatusCode::BadRequest)
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;No host header in request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)));
            }
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; h.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
        };

        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request_uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.upstream_port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request_uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

        Either::B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(upstream_uri))
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the first part of &lt;code&gt;call()&lt;&#x2F;code&gt; we quickly build a custom HTTP response when
there is no HTTP Host header on the incoming request. The real magic happens on
the last line: we invoke the HTTP client to make a GET request and we can use
the resulting Future verbatim as is as our server response. The GET request is
spawned on the event loop, a Future is returned immediately and our
&lt;code&gt;call()&lt;&#x2F;code&gt; function returns. The Future is passed back and as soon as it
evaluates (the GET request is done) the response is sent out as server response.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;converting-integration-tests&quot;&gt;Converting integration tests&lt;&#x2F;h2&gt;
&lt;p&gt;The integration testing experience has changed in good and bad ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;writing-integration-tests-in-rust&#x2F;&quot;&gt;my old integration tests&lt;&#x2F;a&gt; I was &lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;how-do-you-write-integration-tests-that-fail-early-and-often&#x2F;11297&quot;&gt;struggling with hanging
test cases on
panics&lt;&#x2F;a&gt;
and not being able to tear down test services
reliably. This problem has never occurred in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;goal-03&#x2F;tests&#x2F;integration_tests.rs&quot;&gt;the new integration
test&lt;&#x2F;a&gt; because everything is shut down as it should be when the variables run out of
scope in the test function. I think that is exactly the Rust way of cleaning
up, so yay!&lt;&#x2F;li&gt;
&lt;li&gt;The same boilerplate of thread handling and Tokio core setup is needed when
creating quick and dirty HTTP servers and clients for testing. There are no
synchronous helper constructs to shortcut this in test code, so you need to
invent those helpers yourself for your integration test.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The new Hyper library forces you to think more about where your HTTP server is
blocking and it also forces a basic understanding of asynchronous programming
and the concept of Futures. Once that obstacle of learning is out of the way
and all the boilerplate of thread handling, Tokio core and Future types are set
up the rest of your server implementation falls into place nicely.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Using Visual Studio Code for Rust on Ubuntu</title>
            <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/using-visual-studio-code-for-rust-on-ubuntu/</link>
            <guid>https://klau.si/blog/using-visual-studio-code-for-rust-on-ubuntu/</guid>
            <description>&lt;p&gt;I already wrote about &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;using-eclipse-ide-for-rust-on-ubuntu&#x2F;&quot;&gt;using Eclipse for Rust development&lt;&#x2F;a&gt; but after trying
&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;Visual Studio Code&lt;&#x2F;a&gt; (VSCode) I think it is
slightly better than the Eclipse integration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;when the cursor is at a variable the same variable is highlighted elsewhere.&lt;&#x2F;li&gt;
&lt;li&gt;tooltip popups when hovering over variables, functions, methods.&lt;&#x2F;li&gt;
&lt;li&gt;better native support for Git and Markdown files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Syntax highlighting, autocompletion, Ctrl + Click on functions and
auto-formatting of course also work in VSCode as you would expect from an IDE.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-rust-on-ubuntu&quot;&gt;Installing Rust on Ubuntu&lt;&#x2F;h2&gt;
&lt;p&gt;First make sure you have a Rust toolchain environment set up:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;curl https:&#x2F;&#x2F;sh.rustup.rs -sSf | sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(the usual security warning: make sure to trust your sources before you execute
random scripts from the internet.)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;source $HOME&#x2F;.cargo&#x2F;env
cargo install racer
cargo install rustfmt
rustup component add rust-src
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;installing-vscode-and-extensions&quot;&gt;Installing VSCode and extensions&lt;&#x2F;h2&gt;
&lt;p&gt;Download the Deb package from
&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&quot;&gt;code.visualstudio.com&lt;&#x2F;a&gt; and install it with the
Ubuntu software center or dpkg. You should now have a launcher for vscode and
the &lt;code&gt;code&lt;&#x2F;code&gt; command to start the IDE.&lt;&#x2F;p&gt;
&lt;p&gt;Next install the following extensions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust code completion and auto formatting:
&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=kalitaalexey.vscode-rust&quot;&gt;Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;TOML configuration files syntax highlighting: &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=bungcip.better-toml&quot;&gt;Better
TOML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;LLDB debugging for Rust programs: &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=vadimcn.vscode-lldb&quot;&gt;LLDB
Debugger&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;nice file icons:
&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=robertohuertasm.vscode-icons&quot;&gt;vscode-icons&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The Rust extension has experimental support for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;rls&quot;&gt;Rust Language
Server&lt;&#x2F;a&gt;, but it does not work
reliably yet. That&#x27;s why you have to enable the racer legacy mode in the VSCode
settings.&lt;&#x2F;p&gt;
&lt;p&gt;Go to File -&amp;gt; Preferences -&amp;gt; Settings and the editor will open your settings
JSON file. Here are some very useful settings you should use:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;editor.formatOnSave&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;editor.rulers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: [
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;80
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;],
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;files.trimTrailingWhitespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;rust.actionOnSave&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;rust.forceLegacyMode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;workbench.iconTheme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;vscode-icons&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Although VSCode has a sparse user interface (Back&#x2F;Forward buttons are missing
for example when navigating through code) it is a decent IDE for Rust
development. It offers freely configurable keyboard shortcuts and a
comprehensible settings editor. The Rust extension is a bit better than the one
for Eclipse IDE.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Writing integration tests in Rust</title>
            <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/writing-integration-tests-in-rust/</link>
            <guid>https://klau.si/blog/writing-integration-tests-in-rust/</guid>
            <description>&lt;p&gt;In my first post I wrote a quite fragile, minimally working prototype that uses
many &lt;code&gt;unwrap()&lt;&#x2F;code&gt; calls thereby raising lots of panics during execution.
Implementing and verifying proper error handling requires testing. I don&#x27;t want
to do unit testing yet because that would require research about complicated
mocking techniques and dependency injection in Rust. Instead, I would like to
do integration testing of the whole application to prove that the end result is
working as expected.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the requirement for goal 2 of Rustnish:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write an integration test that confirms that the reverse proxy is working as
expected. The test should issue a real HTTP request and check that passing
through upstream responses works. Refactor the code to accept arbitrary port
numbers so that the tests can simulate a real backend without requiring root
access to bind on port 80.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;integration-test-setup&quot;&gt;Integration test setup&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;testing.html&quot;&gt;Rust book has a section about
testing&lt;&#x2F;a&gt; which describes that you
put integration tests into a &amp;quot;tests&amp;quot; folder in your project. We create a file
tests&#x2F;integration_tests.rs with the following content:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; rustnish;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;test_pass_through&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9091&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listening &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;rustnish::start_server(port, upstream_port);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because this is an integration test we have to treat our own application
&amp;quot;rustnish&amp;quot; as external crate that needs to be included here. The &lt;code&gt;#[test]&lt;&#x2F;code&gt;
attribute tells the test runner (cargo) that this function should be executed
as test. Since the start_server() function does not exist yet this test should
fail because it will not even compile.&lt;&#x2F;p&gt;
&lt;p&gt;The tests can be run with cargo:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ cargo test
   Compiling rustnish v0.0.1 (file:&#x2F;&#x2F;&#x2F;home&#x2F;klausi&#x2F;workspace&#x2F;rustnish)
error[E0425]: cannot find function `start_server` in module `rustnish`
  --&amp;gt; tests&#x2F;integration_tests.rs:21:35
   |
21 |     let mut listening = rustnish::start_server(port, upstream_port);
   |                                   ^^^^^^^^^^^^ not found in `rustnish`

error: aborting due to previous error

error: Could not compile `rustnish`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to integration test your Rust application &lt;strong&gt;you need to split it up
into a main.rs file and a lib.rs file&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;main.rs is a thin wrapper that just launches the reverse proxy server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; rustnish;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; port: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_port: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    rustnish::start_server(port, upstream_port);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our own code is now the rustnish library crate that we need to include here.&lt;&#x2F;p&gt;
&lt;p&gt;In lib.rs we create an empty dummy start_server() function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;start_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;upstream_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function needs to be marked as public (&lt;code&gt;pub&lt;&#x2F;code&gt;) so that it is visible to
consumers of our crate. Running the tests again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;$ cargo test
   Compiling rustnish v0.0.1 (file:&#x2F;&#x2F;&#x2F;home&#x2F;klausi&#x2F;workspace&#x2F;rustnish)
    Finished dev [unoptimized + debuginfo] target(s) in 0.60 secs
     Running target&#x2F;debug&#x2F;deps&#x2F;rustnish-64c4558d64f77466

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured

     Running target&#x2F;debug&#x2F;deps&#x2F;rustnish-a8d8bad65e5d7764

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured

     Running target&#x2F;debug&#x2F;deps&#x2F;integration_tests-66e61bd575a35301

running 1 test
test test_pass_through ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured

   Doc-tests rustnish

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All green, tests are passing the first time! The output is a bit long and
confusing and consists of 4 groups:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2 Unit tests directly written in the src files (lib.rs and main.rs): we have
none yet.&lt;&#x2F;li&gt;
&lt;li&gt;Integration tests: everything in the tests folder (the one test we just wrote
is run here).&lt;&#x2F;li&gt;
&lt;li&gt;Doc tests for example code in documentation: we have none yet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That way the cargo test runner lets you know passive aggressively that you
should write all these kind of tests :-)&lt;&#x2F;p&gt;
&lt;p&gt;Of course we are not testing anything useful yet - let&#x27;s expand the test case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integration-tests-for-a-hyper-server&quot;&gt;Integration tests for a Hyper server&lt;&#x2F;h2&gt;
&lt;p&gt;The main idea for our integration test is this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Start a dummy backend server that will mock a real web server (like Apache
that we proxy to).&lt;&#x2F;li&gt;
&lt;li&gt;Start our reverse proxy configured to forward requests to the dummy backend
server.&lt;&#x2F;li&gt;
&lt;li&gt;Make a request to our proxy and assert that we get the response as mocked by
the dummy backend server.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That way we can make sure that the response is passed through correctly and our
reverse proxy works. You can find the whole &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;rustnish&#x2F;blob&#x2F;goal-02&#x2F;tests&#x2F;integration_tests.rs&quot;&gt;test source code on
Github&lt;&#x2F;a&gt;,
let&#x27;s examine the parts of the test:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;test_pass_through&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9090&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;9091&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; dummy_server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Server::http(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;127.0.0.1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;upstream_port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(|_: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Response| { response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(); })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This starts the dummy server that simply responds with a &amp;quot;hello&amp;quot; response to
any request it receives. The actual request handling is done in a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;closures.html&quot;&gt;Rust
closure&lt;&#x2F;a&gt; (anonymous function)
which is expressed by the two pipes &lt;code&gt;|&lt;&#x2F;code&gt;. Easy, expressive and powerful -
thanks Hyper!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listening &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;rustnish::start_server(port, upstream_port);

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Client::new();

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;port.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into_url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request_builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(url);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; request_builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we start our reverse proxy, configured with the port it should listen on
and the upstream port it should forward requests to. Then we make a request to
the reverse proxy and read the response. Again, doing that with the HTTP client
API Hyper provides is fairly easy.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; upstream_response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; body).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; listening.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; _dummy_guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; dummy_server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;();

assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, body);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last part of the test is to make sure that the response received matches
what we expect. For reading the response body we need to make room for it by
allocating a String variable. This is a bit counter-intuitive here - why is
there no method on the stream Read trait that makes that String for me? Maybe
the philosophy is that I as the consumer of the API should be aware of the
memory impact reading that stream has? It looks ugly that I have to define a
mutable variable &lt;code&gt;body&lt;&#x2F;code&gt;, but I never really mutate it. I just fill it once.&lt;&#x2F;p&gt;
&lt;p&gt;Before we can do the assertion to check if the response received is correct we
need to shut down the two servers we started. This is important because
otherwise the test run could just hang and not terminate. If the assertion
fails then the execution will panic in the test function and shutting down the
servers would never happen. That&#x27;s why we stop the servers first and make our
assertion at the very end.&lt;&#x2F;p&gt;
&lt;p&gt;After refactoring the application code this test is passing :-)&lt;&#x2F;p&gt;
&lt;p&gt;At this point I realize that an integration testing framework would be useful
that has clear setup and teardown phases for test runs. That would help
structuring this test by moving the test server shutdown to a place that is
always called regardless if the test is passing or not. A quick web search
points to the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;stainless&quot;&gt;Stainless&lt;&#x2F;a&gt; crate which
probably helps with that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The basic test infrastructure that Rust core ships with is great and let&#x27;s you
quickly get started with Testing. Integration tests are application dependent
and many Rust libraries write their own helper macros to ease test case
development. As mentioned there are libraries like
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;stainless&quot;&gt;Stainless&lt;&#x2F;a&gt; that can ease handling of
initialization and shutdown code for tests.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Using Eclipse IDE for Rust on Ubuntu</title>
            <pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/using-eclipse-ide-for-rust-on-ubuntu/</link>
            <guid>https://klau.si/blog/using-eclipse-ide-for-rust-on-ubuntu/</guid>
            <description>&lt;p&gt;&lt;strong&gt;Update: &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;using-visual-studio-code-for-rust-on-ubuntu&#x2F;&quot;&gt;New blog post about choosing Visual Studio Code for Rust&lt;&#x2F;a&gt;
because of better IDE support.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;getting-started-with-rust&#x2F;&quot;&gt;my first blog post&lt;&#x2F;a&gt; I was
starting out with Atom editor but quickly realized that it is lacking features
of Integrated Development Environments (IDEs). I need to be able to click on
functions and data types to jump to their definitions and was not able to get
that working in Atom.&lt;&#x2F;p&gt;
&lt;p&gt;Looking further at &lt;a href=&quot;https:&#x2F;&#x2F;areweideyet.com&#x2F;&quot;&gt;areweideyet.com&lt;&#x2F;a&gt; I found
&lt;a href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;&quot;&gt;Eclipse&lt;&#x2F;a&gt; listed, an IDE I have used a long time ago for
Java development. Let&#x27;s give it a try!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-java-to-run-eclipse&quot;&gt;Installing Java to run Eclipse&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sudo apt install openjdk-8-jre
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my first installation attempt Eclipse had problems to connect to external
Github software sources sites because of missing Java SSL root certificates.
After &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustDT&#x2F;RustDT&#x2F;issues&#x2F;162&quot;&gt;filing an issue in the wrong
place&lt;&#x2F;a&gt; I found the following &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;33440168&#x2F;2000435&quot;&gt;fix
for missing Java SSL certificates&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sudo dpkg --purge --force-depends ca-certificates-java
sudo apt-get install ca-certificates-java
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;installing-eclipse-base&quot;&gt;Installing Eclipse base&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;downloads&#x2F;&quot;&gt;Eclipse downloads page&lt;&#x2F;a&gt; gives you an
installer where you select additional packages for whatever platform you want
to develop on. You can skip all of that because we will install the external
Rust extension later, so we select &amp;quot;Eclipse Platform (Neon)&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;On the &amp;quot;Projects&amp;quot; step of the installer I only selected EGit for Git support in
Eclipse which I always need. As installation folder I picked &amp;quot;eclipse&amp;quot; which
means Eclipse will end up in your home directory for example at
&lt;code&gt;&#x2F;home&#x2F;klausi&#x2F;eclipse&lt;&#x2F;code&gt;. When you finish the installation you will have to
accept some license agreements and trust some certificates.&lt;&#x2F;p&gt;
&lt;p&gt;In the end Eclipse should start up successfully.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-launcher-shortcut&quot;&gt;Adding a launcher shortcut&lt;&#x2F;h2&gt;
&lt;p&gt;Create a new file at &lt;code&gt;~&#x2F;.local&#x2F;share&#x2F;applications&#x2F;eclipse.desktop&lt;&#x2F;code&gt; with
content like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;[Desktop Entry]
Name=Eclipse
Type=Application
Exec=&#x2F;home&#x2F;klausi&#x2F;eclipse&#x2F;eclipse&#x2F;eclipse
Terminal=false
Icon=&#x2F;home&#x2F;klausi&#x2F;eclipse&#x2F;eclipse&#x2F;icon.xpm
Comment=Integrated Development Environment
NoDisplay=false
Categories=Development;IDE;
Name[en]=Eclipse
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;installing-rustdt-on-ubuntu&quot;&gt;Installing RustDT on Ubuntu&lt;&#x2F;h2&gt;
&lt;p&gt;Make sure you have a Rust toolchain environment set up:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;curl https:&#x2F;&#x2F;sh.rustup.rs -sSf | sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(the usual security warning: make sure to trust your sources before you execute
random scripts from the internet.)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;source $HOME&#x2F;.cargo&#x2F;env
cargo install racer
cargo install rustfmt
cargo install --git https:&#x2F;&#x2F;github.com&#x2F;RustDT&#x2F;Rainicorn --tag version_1.x
rustup component add rust-src
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need the RustDT Eclipse plugin from
&lt;a href=&quot;https:&#x2F;&#x2F;rustdt.github.io&#x2F;&quot;&gt;rustdt.github.io&lt;&#x2F;a&gt;. Follow the installation and
configuration instructions there closely.&lt;&#x2F;p&gt;
&lt;p&gt;My settings in Window -&amp;gt; Preferences -&amp;gt; Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust installation directory: &lt;code&gt;&#x2F;home&#x2F;klausi&#x2F;.cargo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rust &amp;quot;src&amp;quot; directory:
&lt;code&gt;&#x2F;home&#x2F;klausi&#x2F;.rustup&#x2F;toolchains&#x2F;stable-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;rustlib&#x2F;src&#x2F;rust&#x2F;src&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Racer: &lt;code&gt;&#x2F;home&#x2F;klausi&#x2F;.cargo&#x2F;bin&#x2F;racer&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rainicorn: &lt;code&gt;&#x2F;home&#x2F;klausi&#x2F;.cargo&#x2F;bin&#x2F;parse_describe&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;rustfmt: &lt;code&gt;&#x2F;home&#x2F;klausi&#x2F;.cargo&#x2F;bin&#x2F;rustfmt&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m also using the option &amp;quot;Format automatically on editor save&amp;quot;. No questions
anymore what the correct code style is :-)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The installation of Eclipse is a bit tedious and RustDT takes a bit of
configuration, but I think it is totally worth it to be more productive when
writing Rust. Eclipse works better for me than Atom Editor. I also filed a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;contradictioned&#x2F;areweideyet&#x2F;pull&#x2F;46&quot;&gt;pull request to update the available Eclipse features on
areweideyet.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Getting started with Rust</title>
            <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/getting-started-with-rust/</link>
            <guid>https://klau.si/blog/getting-started-with-rust/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;klau.si&#x2F;blog&#x2F;getting-started-with-rust&#x2F;rustnish2.png&quot; alt=&quot;Rustnish logo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt; is still very alien to me and I want to write
a bit of code in it to get a feeling of the concepts and restrictions it
enforces.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Go easy on this code review, she is a woman after all</title>
            <pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate>
            <link>https://klau.si/go-easy-code-review-she-woman-after-all/</link>
            <guid>https://klau.si/go-easy-code-review-she-woman-after-all/</guid>
            <description>&lt;p&gt;What is the appropriate response if a fellow woman pulls you aside and says &amp;quot;Go easy on this code review, she is a woman after all and already gets a lot of shit.&amp;quot;? Of course it is &amp;quot;Sure, this will be my friendliest code review ever!&amp;quot;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2016 talk: Automated Testing: PHPUnit all the way</title>
            <pubDate>Tue, 27 Sep 2016 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-automated-testing-phpunit/</link>
            <guid>https://klau.si/blog/drupalcon-automated-testing-phpunit/</guid>
            <description>&lt;p&gt;Here are &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1Uhw3wYfcC_axz6SRTxEHVe8FZHbA-tUGN7dr7YyHMXg&#x2F;edit#slide=id.p&quot;&gt;the slides&lt;&#x2F;a&gt; and the video of our DrupalCon Dublin 2016 talk &amp;quot;Automated Testing: PHPUnit all the way&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;jcdEp3YGa94&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2016 talk: How to publish a module on drupal.org</title>
            <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-publish-module/</link>
            <guid>https://klau.si/blog/drupalcon-publish-module/</guid>
            <description>&lt;p&gt;Here is the video of my DrupalCon Asia 2016 talk &amp;quot;How to publish a module on drupal.org&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;JWLb--cb33E&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupal development setup on Ubuntu 15.10</title>
            <pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate>
            <link>https://klau.si/dev/</link>
            <guid>https://klau.si/dev/</guid>
            <description>&lt;p&gt;I upgraded my local computer to Ubuntu 15.10 today and revisited my Drupal development environment (this &lt;a href=&quot;&#x2F;drupal-development-setup-ubuntu-1310&quot;&gt;guide is also available for Ubuntu 13.10&lt;&#x2F;a&gt;). Here is a simple and fast guide how to configure Ubuntu for development. There are a number of &lt;a href=&quot;https:&#x2F;&#x2F;www.drupal.org&#x2F;node&#x2F;262&quot;&gt;installation documentation pages on this topic on drupal.org&lt;&#x2F;a&gt;, but they suggest to use the packaged Drupal installation and to run Drupal in subfolders (e.g. http:&#x2F;&#x2F;localhost&#x2F;drupal6). They also do not cover some other important development tools like Phpmyadmin or php.ini settings. During development we want to edit files and we want to do that somewhere in our home directory to avoid any permission problems. There is also &lt;a href=&quot;https:&#x2F;&#x2F;www.drupal.org&#x2F;project&#x2F;drubuntu&quot;&gt;Drubuntu&lt;&#x2F;a&gt;, but it is outdated and does way too much magic in my opinion. So here is a more transparent tutorial that highlights the key development configuration settings for Drupal development on a local computer (do not use this for a production server!).</description>
        </item>
        <item>
            <title>Wie viele Frauen sprechen eigentlich bei &quot;Am Schauplatz&quot;?</title>
            <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://klau.si/wie-viele-frauen-sprechen-eigentlich-bei-am-schauplatz/</link>
            <guid>https://klau.si/wie-viele-frauen-sprechen-eigentlich-bei-am-schauplatz/</guid>
            <description>&lt;p&gt;Ich habe mir die ORF Sendung &lt;a href=&quot;http:&#x2F;&#x2F;tvthek.orf.at&#x2F;program&#x2F;Am-Schauplatz&#x2F;1239&#x2F;Am-Schauplatz-An-der-Grenze&#x2F;10644782&quot;&gt;&amp;quot;Am Schauplatz: An der Grenze&amp;quot; vom 24.09.2015&lt;&#x2F;a&gt; angesehen und stellte fest, dass keine einzige flüchtende Frau* zu Wort kam. Auch die anderen Interviewten waren Großteils Männer*, also habe ich einfach mal nachgezählt: in der Sendung sprachen 38 Personen direkt in die Kamera, davon 9 Frauen* (24%). Was jetzt klingt wie eine Männersendung &amp;quot;Patriachat Reprodzuieren: Folge 5327&amp;quot; entpuppt sich aber als Produktion der Reporterinnen Gudrun Kampelmüller, Julia Kovarik und Doris Plank. Ich bin enttäuscht.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Die Einteilung nach Frau&#x2F;Mann wurde nach meiner subjektiven Wahrnehmung durchgeführt. Wir sind uns bewusst, dass die Zahlen und Zuschreibungen dadurch nie ganz genau sein können und auch nicht sein sollen.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2015 talk: Drupal and Security: what you need to know</title>
            <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-security-what-you-need-to-know/</link>
            <guid>https://klau.si/blog/drupalcon-security-what-you-need-to-know/</guid>
            <description>&lt;p&gt;Here are &lt;a href=&quot;http:&#x2F;&#x2F;scor.github.io&#x2F;drupal-security-2015&quot;&gt;the slides&lt;&#x2F;a&gt; and the video of our DrupalCon Barcelona 2015 talk &amp;quot;Drupal and Security: what you need to know&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;5LpKelSMsas&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2015 talk: Coding with Rules for Drupal 8</title>
            <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-coding-with-rules-drupal-8/</link>
            <guid>https://klau.si/blog/drupalcon-coding-with-rules-drupal-8/</guid>
            <description>&lt;p&gt;Here is the video of our DrupalCon Barcelona 2015 talk &amp;quot;Coding with Rules for Drupal 8&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;QcU_LCAHNLg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2014 talk: Cracking Drupal</title>
            <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-cracking-drupal/</link>
            <guid>https://klau.si/blog/drupalcon-cracking-drupal/</guid>
            <description>&lt;p&gt;Here are &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1LWXRbcQUTj9NDHg8gHplAc7EGy94nmbUEUryWLHJqBg&#x2F;edit?usp=sharing&quot;&gt;the slides&lt;&#x2F;a&gt; and the video of our DrupalCon Amsterdam 2014 talk &amp;quot;Cracking Drupal&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;ZkNGObI4nlU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>How I became aware of sexism</title>
            <pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate>
            <link>https://klau.si/how-i-became-aware-sexism/</link>
            <guid>https://klau.si/how-i-became-aware-sexism/</guid>
            <description>&lt;p&gt;This is a cross post to the &lt;a href=&quot;http:&#x2F;&#x2F;groups.drupal.org&#x2F;node&#x2F;419973&quot;&gt;&amp;quot;ah-ha moment regarding sexism in tech&amp;quot; discussion on groups.drupal.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I have never been devalued because of my gender, that&#x27;s why I was long blind to sexism and feminism. I thought this topic has been solved since 1920 when women were allowed to vote in Austria.</description>
        </item>
        <item>
            <title>Drupalcamp Vienna 2013 talk: Cracking Drupal</title>
            <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcamp-cracking-drupal/</link>
            <guid>https://klau.si/blog/drupalcamp-cracking-drupal/</guid>
            <description>&lt;p&gt;Here is the video of my Drupalcamp Vienna 2013 talk &amp;quot;Cracking Drupal&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;-Lxz7YZ4Cr8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupal development setup on Ubuntu 13.10</title>
            <pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate>
            <link>https://klau.si/drupal-development-setup-ubuntu-1310/</link>
            <guid>https://klau.si/drupal-development-setup-ubuntu-1310/</guid>
            <description>&lt;p&gt;I upgraded my local computer to Ubuntu 13.10 today and revisited my Drupal development environment (this &lt;a href=&quot;&#x2F;dev-ubuntu-12-04&quot;&gt;guide is also available for Ubuntu 12.04&lt;&#x2F;a&gt;). Here is a simple and fast guide how to configure Ubuntu for development. There are a number of &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;node&#x2F;262&quot;&gt;installation documentation pages on this topic on drupal.org&lt;&#x2F;a&gt;, but they suggest to use the packaged Drupal installation and to run Drupal in subfolders (e.g. http:&#x2F;&#x2F;localhost&#x2F;drupal6). They also do not cover some other important development tools like Phpmyadmin or php.ini settings. During development we want to edit files and we want to do that somewhere in our home directory to avoid any permission problems. There is also &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;project&#x2F;drubuntu&quot;&gt;Drubuntu&lt;&#x2F;a&gt;, but it is outdated and does way too much magic in my opinion. So here is a more transparent tutorial that highlights the key development configuration settings for Drupal development on a local computer (do not use this for a production server!).</description>
        </item>
        <item>
            <title>Drupalcon Prague 2013 talk: REST and Serialization in Drupal 8</title>
            <pubDate>Wed, 25 Sep 2013 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-prague-rest-serialization-drupal-8/</link>
            <guid>https://klau.si/blog/drupalcon-prague-rest-serialization-drupal-8/</guid>
            <description>&lt;p&gt;Here is the video of our DrupalCon Prague 2013 talk &amp;quot;REST and serialization in Drupal 8&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;w6dqzDbY78k&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupalcon Portland 2013 talk: REST and Serialization in Drupal 8</title>
            <pubDate>Thu, 23 May 2013 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-portland-rest-serialization-drupal-8/</link>
            <guid>https://klau.si/blog/drupalcon-portland-rest-serialization-drupal-8/</guid>
            <description>&lt;p&gt;Here is the video of our DrupalCon Portland 2013 talk &amp;quot;REST and serialization in Drupal 8&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;6FNfy7pU6mE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Screencasts with RecordMyDesktop, ffmpeg conversion for HTML5 video</title>
            <pubDate>Sun, 12 May 2013 00:00:00 +0000</pubDate>
            <link>https://klau.si/screencasts-recordmydesktop-ffmpeg-conversion-html5-video/</link>
            <guid>https://klau.si/screencasts-recordmydesktop-ffmpeg-conversion-html5-video/</guid>
            <description>&lt;p&gt;Producing a demo video for &lt;a href=&quot;http:&#x2F;&#x2F;portland2013.drupal.org&#x2F;session&#x2F;rest-and-serialization-drupal-8&quot;&gt;my DrupalCon Portland presentation&lt;&#x2F;a&gt; caused a bit frustration with video editing tools, so here is a simple solution to cut and convert a video on Ubuntu.</description>
        </item>
        <item>
            <title>State of the project application issue queue 2013</title>
            <pubDate>Fri, 08 Feb 2013 00:00:00 +0000</pubDate>
            <link>https://klau.si/state-project-application-issue-queue-2013/</link>
            <guid>https://klau.si/state-project-application-issue-queue-2013/</guid>
            <description>&lt;p&gt;I wrote a brief status update of what is going on in the Drupal project application issue queue lately. Read more at &lt;a href=&quot;http:&#x2F;&#x2F;groups.drupal.org&#x2F;node&#x2F;281758&quot;&gt;groups.drupal.org&lt;&#x2F;a&gt;.</description>
        </item>
        <item>
            <title>REST module status report</title>
            <pubDate>Sun, 16 Dec 2012 00:00:00 +0000</pubDate>
            <link>https://klau.si/rest-module-status-report/</link>
            <guid>https://klau.si/rest-module-status-report/</guid>
            <description>&lt;p&gt;I posted a &lt;a href=&quot;http:&#x2F;&#x2F;groups.drupal.org&#x2F;node&#x2F;273413&quot;&gt;status report on g.d.o&lt;&#x2F;a&gt; on the work that has been going into the Restful Web Services module for Drupal 8. I would like to thank &lt;a href=&quot;http:&#x2F;&#x2F;www.acquia.com&#x2F;&quot;&gt;Acquia&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;epiqo.com&#x2F;&quot;&gt;epiqo&lt;&#x2F;a&gt; again who have extended their sponsorship so that I can get further things done in the &lt;a href=&quot;http:&#x2F;&#x2F;buytaert.net&#x2F;drupal-8-feature-freeze-extended&quot;&gt;Drupal 8 feature completion phase&lt;&#x2F;a&gt;.</description>
        </item>
        <item>
            <title>A RESTful entity web API for Drupal 8</title>
            <pubDate>Tue, 16 Oct 2012 00:00:00 +0000</pubDate>
            <link>https://klau.si/restful-entity-web-api-drupal-8/</link>
            <guid>https://klau.si/restful-entity-web-api-drupal-8/</guid>
            <description>&lt;p&gt;I&#x27;m happy to announce that I will join the &lt;a href=&quot;http:&#x2F;&#x2F;groups.drupal.org&#x2F;wscci&quot;&gt;WSCCI initiative&lt;&#x2F;a&gt; to help develop web service interfaces in Drupal 8. Big thanks to my team at &lt;a href=&quot;http:&#x2F;&#x2F;epiqo.com&#x2F;&quot;&gt;epiqo&lt;&#x2F;a&gt; for sponsoring and making time for me to work on this, as well as &lt;a href=&quot;https:&#x2F;&#x2F;www.acquia.com&#x2F;&quot;&gt;Acquia&lt;&#x2F;a&gt; for providing a crucial financial part to make this happen.&lt;&#x2F;p&gt;
&lt;p&gt;Read the &lt;a href=&quot;http:&#x2F;&#x2F;groups.drupal.org&#x2F;node&#x2F;262063&quot;&gt;full announcement on groups.drupal.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2012 talk: The project application process</title>
            <pubDate>Fri, 24 Aug 2012 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-project-application-process/</link>
            <guid>https://klau.si/blog/drupalcon-project-application-process/</guid>
            <description>&lt;p&gt;Here is the video of our DrupalCon Munich 2012 talk &amp;quot;The project application process&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;jLj0K8Trvus&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Drupal development setup on Ubuntu 12.04</title>
            <pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate>
            <link>https://klau.si/dev-ubuntu-12-04/</link>
            <guid>https://klau.si/dev-ubuntu-12-04/</guid>
            <description>&lt;p&gt;I upgraded my local computer to Ubuntu 12.04 today and revisited my Drupal development environment. Here is a simple and fast guide how to configure Ubuntu for development. There are a number of &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;node&#x2F;262&quot;&gt;installation documentation pages on this topic on drupal.org&lt;&#x2F;a&gt;, but they suggest to use the packaged Drupal installation and to run Drupal in subfolders (e.g. http:&#x2F;&#x2F;localhost&#x2F;drupal6). They also do not cover some other important development tools like Phpmyadmin or php.ini settings. During development we want to edit files and we want to do that somewhere in our home directory to avoid any permission problems. There is also &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;project&#x2F;drubuntu&quot;&gt;Drubuntu&lt;&#x2F;a&gt;, but it is outdated and does way too much magic in my opinion. So here is a more transparent tutorial that highlights the key development configuration settings for Drupal development.</description>
        </item>
        <item>
            <title>Installation of a Drupal Upgrade Path Test DB</title>
            <pubDate>Sat, 31 Mar 2012 00:00:00 +0000</pubDate>
            <link>https://klau.si/installation-drupal-upgrade-path-test-db/</link>
            <guid>https://klau.si/installation-drupal-upgrade-path-test-db/</guid>
            <description>&lt;p&gt;While working on the &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;node&#x2F;935062&quot;&gt;Kill role IDs patch&lt;&#x2F;a&gt; I had to develop some upgrade path Simpletests. Unfortunately the &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;node&#x2F;1429136&quot;&gt;documentation for upgrade path tests&lt;&#x2F;a&gt; currently lacks installtion instructions on how to work with the existing bare and filled exported test databases. Here is a small writeup of what I did until we document that properly.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Drupal project application issue slaughter</title>
            <pubDate>Sun, 06 Nov 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/drupal-project-application-issue-slaughter/</link>
            <guid>https://klau.si/drupal-project-application-issue-slaughter/</guid>
            <description>&lt;p&gt;This is a happy day: the &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;project&#x2F;issues&#x2F;projectapplications?status=8&quot;&gt;issues needing review&lt;&#x2F;a&gt; count is down to zero at this moment in the Drupal project application issue queue. I have attached a screenshot as proof.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;sites&#x2F;default&#x2F;files&#x2F;Screenshot at 2011-11-07 00%3A22%3A36.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;&#x2F;sites&#x2F;default&#x2F;files&#x2F;Screenshot%20at%202011-11-07%2000%3A22%3A36.png&quot; style=&quot;width: 600px; height: 303px; margin: 10px;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I started my involvement with project applications a few weeks ago, where &lt;a href=&quot;http:&#x2F;&#x2F;groups.drupal.org&#x2F;node&#x2F;187939#comment-620579&quot;&gt;we had 250 open issues&lt;&#x2F;a&gt; needing review. I saw it as a challenge to bring this number down radically and invested some hours pursuing it. I even &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;node&#x2F;1325258&quot;&gt;got into community spotlight&lt;&#x2F;a&gt; for this effort, which would not have been possible without the mentorship and support of many people. I want to thank greggles, sreynen, jthorson, ELC and all others that helped to resolve this 250 issue backlog and supported me in my addiction. Keep up the good work!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Git diff --color-words</title>
            <pubDate>Sun, 25 Sep 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/git-diff-color-words/</link>
            <guid>https://klau.si/git-diff-color-words/</guid>
            <description>&lt;p&gt;Git command for better patch review.&lt;&#x2F;p&gt;
&lt;p&gt;The usual patch format is often not really human readable. Consider &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;files&#x2F;issues&#x2F;dependent-clause-errors-806974-8.patch&quot;&gt;this patch on drupal.org&lt;&#x2F;a&gt; (&lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;node&#x2F;806974&quot;&gt;issue&lt;&#x2F;a&gt;) that only removes commas. How can I be sure that only the comma was removed on the changed lines? Fortunately, Git can help here. Download the patch, apply it to your repository and use the following command to get a colored output:&lt;&#x2F;p&gt;
&lt;pre&gt;
git diff --color-words&lt;&#x2F;pre&gt;
&lt;p&gt;The output will not show changed lines but changed words, usually removed words in red and added words in green. So you get a much more fine-grained overview of what the patch changes.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2011 talk: The Rules way of life</title>
            <pubDate>Fri, 26 Aug 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-rules-way-of-life/</link>
            <guid>https://klau.si/blog/drupalcon-rules-way-of-life/</guid>
            <description>&lt;p&gt;Here is the video of our DrupalCon London 2011 talk &amp;quot;The Rules way of life&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;236&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;xXcbPi16VAU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Ein Rückblick auf 7 Jahre TU Wien</title>
            <pubDate>Thu, 23 Jun 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/ein-rückblick-auf-7-jahre-tu-wien/</link>
            <guid>https://klau.si/ein-rückblick-auf-7-jahre-tu-wien/</guid>
            <description>&lt;p&gt;
	Ich habe vor kurzem mein Informatikstudium an der TU Wien abgeschlossen, Zeit für einen kleinen Rückblick. Obwohl in diesem Artikel auch viele für mich negative Dinge vorkommen werden, so habe ich doch die Jahre sehr genossen, viel dazu gelernt und viele interessante Menschen getroffen. Ich möchte diesen Lebensabschnitt nicht missen und würde mich wohl wieder für die TU Wien entscheiden.&lt;&#x2F;p&gt;
&lt;h3&gt;
	Der Anfang&lt;&#x2F;h3&gt;
&lt;p&gt;
	Ca. 60% aller Informatik-Neuinskribierenden österreichweit beginnen ihr Informatikstudium an der TU Wien. So auch ich, da für mich erstens Wien als einzig ernstzunehmende Stadt in Österreich schon mal als Ort fix war, und zweitens weil für mich die TU als einzige Institution überhaupt in den Sinn kam. Ich kam nicht mal auf die Idee mich überhaupt über Informatikstudien an der Uni Wien, WU Wien etc. zu erkundigen. Die TU profitiert extrem von ihrem Image, das praktisch ein Selbstläufer ist. Egal wie prekär die Situation an der TU ist, wie schlecht betreut die Lehre ist, wie sehr ein selbstbestimmtes Studium eingeschränkt wird, wie viele intelligente Köpfe wegen den miesen Arbeitsverträgen fliehen - in den Medien ist die TU stets die Top-Universität und lockt weiterhin die Unwissenden (sowohl Studierende als auch Profs) an. Dadurch bleiben auch einige schlaue Leute an der TU kleben und sorgen dafür, dass die TU weiterhin am Leben gehalten wird.&lt;&#x2F;p&gt;
&lt;p&gt;
	Jedenfalls kam ich mit meiner HTL-Vorbildung an die TU und konnte sehr leicht mit Fächern wie &quot;Einführung in das Programmieren&quot; (EPROG) und &quot;Grundzüge der Informatik&quot; umgehen. Viele meiner KollegInnen, die keine HTL besucht hatten und noch keine Programmierkenntnisse hatten, fanden EPROG hingegen gar nicht lustig. Es wird versucht den Stoff aus 3 Jahren Programmieren in der HTL in einer Lehrveranstaltung in einem Semester zu vermitteln. Es gibt dafür aber bis heute kein spezielles didaktisches Konzept, nach dem ersten Semester wird dann einfach erwartet, dass du ab sofort sowieso gut programmieren kannst. Entweder du bringst es dir also mit viel Mühe selbst bei, oder du konntest es schon vorher. Alle InformatikerInnen mit TU-Abschluss haben das Programmieren also mit Sicherheit nicht auf der TU gelernt.&lt;&#x2F;p&gt;
&lt;h3&gt;
	Mathe&lt;&#x2F;h3&gt;
&lt;p&gt;
	Die TU hat mir beigebracht formale Mathematik leidenschaftlich zu hassen. Zu Beginn des Informatikstudiums müssen zwei Mathe-Blöcke absolviert werden, die mehrere Probleme aufweisen:&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Der Stoff ist trocken (siehe Video unterhalb)&lt;&#x2F;li&gt;
	&lt;li&gt;
		Der vermittelte Stoff existiert völlig losgelöst für sich, es gibt keine Anknüpfungspunkte zum Rest des Informatikstudiums (gilt speziell für Software Engineering)&lt;&#x2F;li&gt;
	&lt;li&gt;
		Einfache Zusammenhänge, die wichtig fürs Verständnis sind, werden nicht klargemacht (&quot;das muss ich Ihnen nicht erklären, das ist eh trivial&quot;)&lt;&#x2F;li&gt;
	&lt;li&gt;
		Haufenweise Sätze, Definitionen, Beweise ohne sie im selben Atemzug mit Beispielen zu erläutern&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p class=&quot;rtecenter&quot;&gt;
	&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;gP-LD2HGs0U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;
	Es entsteht also Verwirrung, Unverständnis und Frust. Ich persönlich war mir ziemlich sicher, dass ich den Stoff halbwegs verstanden hatte, dennoch musste ich dreimal zur Vorlesung Mathematik 1 antreten, bis ich eine positive Note erreicht hatte. Daraus lässt sich auch ein gewisser Knock-out Charakter ablesen, weswegen viele talentierte Leute das Studium einfach schmeißen. Umso ärgerlicher war für mich die Tatsache, dass ich die Inhalte von Mathematik1 &amp;amp; 2 später nicht mehr in meinem Studium brauchte, höchstens die Nebeneffekte wie formales Denken oder wie prinzipiell ein formaler Beweis ausschaut. Dennoch wird an der TU sehr stark an dieser Vermittlung von Mathematik festgehalten, anstatt einen einfachen Ersatz mit ein bisschen Logik, formaler Notation und Beweisführung anzubieten.&lt;&#x2F;p&gt;
&lt;h3&gt;
	Autodidakt&lt;&#x2F;h3&gt;
&lt;p&gt;
	Das Massenstudium Informatik und die schlechten Betreuungsverhältnisse im weiteren Verlauf meines Studiums haben aus mir einen Autodidakten gemacht, was ich gar nicht schlecht finde. Für Informatik ist meist kein spezielles Equipment (z.B. Labors oder Geräte) erforderlich, deshalb kann sehr viel von zu Hause oder von anderen Orten aus erledigt werden, es muss nur ein Rechner vorhanden sein. Auch dadurch wird das Erlernen und Einüben auf eigene Faust begünstigt. Außerdem werden Kenntnisse über wichtige Werkzeuge (z.B. Linux, Unix-Shell, SSH, Subversion&#x2F;Git, Eclipse, LaTeX, etc.) einfach vorausgesetzt und gar nicht auf der Uni gelehrt, die musste ich mir auch selber beibringen. Auch das kann ich nachvollziehen, da eine universitäre Ausbildung ja eher auf Konzepte fokussieren sollte und nicht auf gerade aktuelle Implementierungen. Zu guter Letzt kommen noch die oftmals sehr schlechten Lernunterlagen hinzu, die mich dazu gezwungen haben mir den Stoff mit Google, Wikipedia und manchmal sogar mit Büchern zu erarbeiten. Eine Konsequenz daraus ist auch das &lt;a href=&quot;http:&#x2F;&#x2F;vowi.fsinf.at&quot;&gt;VorlesungsWiki&lt;&#x2F;a&gt;, eine Plattform von Studierenden für Studierende, wo Meinungen, Materialien und Tipps zum Studium ausgetauscht werden.&lt;&#x2F;p&gt;
&lt;p&gt;
	In diesem Zusammenhang ist es interessant, dass einige ProfessorInnen immer noch glauben, dass die TU eine Präsenzuniversität ist. Daran wollen sie auch festhalten und stellen absichtlich schlechte Lernunterlagen bereit, damit die Leute doch gefälligst brav in die Vorlesung kommen. Natürlich geht das etwas an der Realität vorbei, das Informatikstudium kann problemlos auch als Fernstudium betrieben werden, da es selten Anwesenheitspflichten gibt und wir sowieso zu Autodidakten angeleitet werden. Ich habe diese Flexibilität immer geschätzt und oft nur gut gestaltete Vorlesungen besucht. Den Rest bringst du dir eben selbst bei.&lt;&#x2F;p&gt;
&lt;h3&gt;
	Fachschaft Informatik&lt;&#x2F;h3&gt;
&lt;p&gt;
	&lt;img alt=&quot;&quot; src=&quot;&#x2F;sites&#x2F;default&#x2F;files&#x2F;fsinf_logo.png&quot; style=&quot;width: 216px; height: 97px; float: right; margin: 10px;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;
	Eine der wichtigsten Erfahrungen im Studium war meine Beteiligung an der &lt;a href=&quot;http:&#x2F;&#x2F;fsinf.at&quot;&gt;Fachschaft Informatik&lt;&#x2F;a&gt;, der Studienrichtungsvertretung. Ich kam mit sehr vielen intelligenten und interessanten Leuten in Kontakt und habe meinen Horizont bezüglich Informatik, Basisdemokratie, Unipolitik, Feminismus, Gesellschaftspolitik und vielem mehr extrem erweitern können. Ich habe gelernt als Teil einer Interessenvertretung Dinge selbst in die Hand zu nehmen und mich an meiner Studiensituation aktiv zu beteiligen. Danke für so viele spannende Themen und den Rückhalt, den mir die Gruppe gegeben hat.&lt;&#x2F;p&gt;
&lt;h3&gt;
	Wissenschaftlichkeit?&lt;&#x2F;h3&gt;
&lt;p&gt;
	Die TU legt immer sehr viel wert auf Wissenschaftlichkeit und betont das auch laufend. &quot;Wissenschaftlich&quot; bedeutet in meinen Augen die Beschreibung von Erkenntnissen, die einfach nachprüfbar sind. Ich habe eine Theorie oder eine Idee, ich untersuche sie mit einem Experiment oder einer Implementierung, ich beschreibe Resultate und wie ich auf sie gekommen bin. Nachprüfbarkeit ist meines Erachtens dabei der wichtigste Aspekt, nur dann kann Wissensvermittlung funktionieren. Leider steht aber bei vielen &quot;wissenschaftlichen&quot; Arbeiten, die ich mir angesehen habe, die Wissensvermittlung nicht im Vordergrund; es werden sehr lange Sätze und viele Fremdwörter verwendet, um die Komplexität des Textes zu erhöhen. Oft kommt es mir so vor, als würde die Autorin versuchen einfache Zusammenhänge krampfhaft zu verkomplizieren. Vielleicht gibt es da einen gewissen Minderwertigkeitskomplex unter den ForscherInnen, was zu einfach klingt kann nicht wissenschaftlich sein? Die TU ist jedenfalls eine öffentliche Bildungseinrichtung, die einerseits Wissen erzeugen und andererseits auch vermitteln soll - wenn Wissenschaftlichkeit aber mit Komplexität gleichgesetzt wird, dann kann beides nicht gut funktionieren.&lt;&#x2F;p&gt;
&lt;p&gt;
	Das traurige dabei ist, dass dieser Wissenschaftlichkeitsbegriff auch auf mich abgefärbt hat. Wenn ich mir &lt;a href=&quot;&#x2F;thesis&quot;&gt;meine Diplomarbeit&lt;&#x2F;a&gt; so anschaue dann passt sie an manchen Stellen auch ins Schema und in den Stil der üblichen überladenen, aufgeblähten Publikationen.&lt;&#x2F;p&gt;
&lt;h3&gt;
	Elite und Arroganz&lt;&#x2F;h3&gt;
&lt;p&gt;
	Üblicherweise betrachten sich Studierende, Lehrende und ProfessorInnen an Universitäten als KollegInnen und tauschen gemeinsam Wissen aus. Leider zeigte sich vor allem in den letzten Jahren ein anderes Bild: &quot;Wissen Sie, ich bin ja auf Ihrer Seite, aber Sie müssen ja selbst zugeben, dass 50% der Informatikstudis einfach nur Vollidioten sind&quot; sagte einmal ein Lehrender zu mir. Ich habe mir eine Antwort verkniffen, auch wenn ich am liebsten das Kompliment angewendet auf Lehrende zurückgegeben hätte - wir sollten mit solchen plumpen Pauschalaussagen vorsichtig sein. Generell läuft es aber darauf hinaus, dass schlechte und mittelgute Leute an der TU unerwünscht sind, denn wir wollen nur die besten der besten. Dieses Denken ist auch durch die immer schlimmer werdenden &lt;a href=&quot;http:&#x2F;&#x2F;fsinf.at&#x2F;uni-budget-sinkt&quot;&gt;Sparmaßnahmen&lt;&#x2F;a&gt; gefördert worden, und irgendwann gibt die Fakultät halt auf, um mehr Geld beim Ministerium zu kämpfen. Dann wird eben versucht die Studierendenzahlen zu senken (auch wenn eigentlich mehr InformatikerInnen in der Wirtschaft gebraucht werden), was so abstruse Blüten treibt wie die &lt;a href=&quot;http:&#x2F;&#x2F;fsinf.at&#x2F;studieneingangsgespr%C3%A4che-sose-2011&quot;&gt;Studieneingangsgespräche&lt;&#x2F;a&gt; oder die schärfste Studieneingangsphase an der ganzen TU.&lt;&#x2F;p&gt;
&lt;p&gt;
	Der Eilte-Wahn schlägt sich aber auch zum Beispiel bei den &lt;a href=&quot;http:&#x2F;&#x2F;www.informatik.tuwien.ac.at&#x2F;dekanat&#x2F;auslandsaufenthalte&quot;&gt;Regelungen für Erasmus-Auslandssemester&lt;&#x2F;a&gt; nieder, wonach keine Pflichtfächer mehr im Ausland gemacht werden dürfen (Begründung: Prüfungstourismus, im Forum gibt es denn &lt;a href=&quot;http:&#x2F;&#x2F;www.informatik-forum.at&#x2F;showthread.php?88082-ACHTUNG!-LVAs-ausl%E4ndischer-Unis-werden-an-der-TU-Wien-%28Informatik%29-nicht-anerkannt&amp;amp;p=715202&amp;amp;viewfull=1#post715202&quot;&gt;passenden sarkastischen Kommentar&lt;&#x2F;a&gt; dazu). Für Studien mit wenigen Wahlfächern bedeutet das praktisch die Abschaffung von Auslandsaufenthalten. Apropos wenige Wahlfächer: Der Studienzweig Technische Informatik spielt in einer eigenen Liga was den Begriff &quot;elitär&quot; angeht, sowohl vom größenwahnsinnigen Studienplan her, als auch von den handelnden Lehrenden in diesem Bereich (allein darüber könnte ich wohl seitenweise schreiben).&lt;&#x2F;p&gt;
&lt;p&gt;
	Ein Effekt dieser Elite-Bestrebungen ist auch ein Rückgang des Frauenanteils bei den AnfängerInnen von 20% auf 14% im Sommersemester 2011 (Einführung der Studieneingangsgespräche). Ich rechne damit, dass sich dadurch der Frauenanteil bei Informatikstudierenden mittelfristig halbieren wird.&lt;&#x2F;p&gt;
&lt;h3&gt;
	Was kann ich jetzt eigentlich?&lt;&#x2F;h3&gt;
&lt;p&gt;
	Studium abgeschlossen, was bleibt hängen? Ich habe gelernt mich umfassend selbst zu organisieren, strukturiert und analytisch zu denken, sowie Vorgehensweisen kritisch zu hinterfragen. Ich nehme aus meinem Studium viele Konzepte der Informatik mit, die sich oft wiederholen und vielerorts angewandt werden können. Ich fühle mich in meinem Kerngebiet (Software Engineering &amp;amp; Internet Computing) gut gerüstet und kann mich auch auf anderen Gebieten schnell einarbeiten. Ich habe darauf geachtet mein Studium breit aufzustellen und im Rahmen meiner Freifächer auch völlig andere Themen kennenzulernen, auch um das Studium wenigstens ein bisschen interdisziplinär zu gestalten und der Fachidiotie entgegenzuwirken.&lt;&#x2F;p&gt;
&lt;p&gt;
	Nichts desto trotz entspreche ich wahrscheinlich nicht den Wunschvorstellungen, die unsere ProfessorInnen an AbsolventInnen haben: &quot;Wie viel ist log(1)? Wer diese Frage nicht sofort beantworten kann, hat den Abschluss nicht verdient.&quot; Tja, nach der Definition habe ich den Abschluss nicht verdient, ich kann die Frage natürlich nicht sofort beantworten. Dazu habe ich mich in meinem Studium viel zu wenig mit Mathematik beschäftigt und bin eingerostet. Was ich allerdings schon tun kann, ist kurz Nachzudenken und mir im Kopf eine Herleitung zu basteln, ich weiß der Logarithmus ist die Umkehrfunktion einer Exponentialfunktion, ich kann visualisieren wie sich diese Kurve verhält ... letztlich würde ich wohl dahinter kommen (auch ohne Internet). Jedenfalls ist mir diese Fähigkeit zur Problemlösung lieber als eine zufällig auswendig gekonnte Lösung.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A nginx configuration for Drupal</title>
            <pubDate>Mon, 23 May 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/nginx-configuration-drupal/</link>
            <guid>https://klau.si/nginx-configuration-drupal/</guid>
            <description>&lt;p&gt;While nginx is highly configurable, you might encounter some problems and pitfalls when configuring it with Drupal. This post contains our configuration and solutions to those problems.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Web Service Composition in Drupal</title>
            <pubDate>Wed, 11 May 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/thesis/</link>
            <guid>https://klau.si/thesis/</guid>
            <description>&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;&#x2F;sites&#x2F;default&#x2F;files&#x2F;wsclient_logo_300_0.thumbnail.png&quot; style=&quot;width: 209px; height: 217px; float: right;&quot; &#x2F;&gt;A master thesis written by Klaus Purer at the Vienna University of Technology, released in May 2011.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Building web applications has become a complex task and often requires interaction with other web applications, such as web services. Drupal is a free and open source content management system and framework that provides a rich platform for rapid web development. The modular and extensible nature of Drupal allows developers to customize and embrace the core functionality and to create new features. This thesis is about investigating and implementing a web service client module for Drupal that is able to consume classical WS* web services as well as RESTful web services.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Home WiFi setup with Ubuntu, Asus RT-N56U and Linksys WMP600N</title>
            <pubDate>Fri, 15 Apr 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/home-wifi-setup-ubuntu-asus-rt-n56u-and-linksys-wmp600n/</link>
            <guid>https://klau.si/home-wifi-setup-ubuntu-asus-rt-n56u-and-linksys-wmp600n/</guid>
            <description>&lt;p&gt;
	A summary about setting up a 802.11n wireless network at home, also for future self-reference.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Running PHP 5.3 and 5.2 in parallel with nginx</title>
            <pubDate>Mon, 17 Jan 2011 00:00:00 +0000</pubDate>
            <link>https://klau.si/running-php-53-and-52-parallel-nginx/</link>
            <guid>https://klau.si/running-php-53-and-52-parallel-nginx/</guid>
            <description>&lt;p&gt;
	The problem: you want to upgrade your Ubuntu server, but you still need PHP 5.2 for some old web sites (i.e. Drupal 5 is not PHP 5.3 compatible).&lt;br &#x2F;&gt;
	The solution: Go with the packaged PHP 5.3 for your new sites and compile PHP 5.2 yourself for the old ones. As we use the nginx webserver with FastCGI, we can choose per site which PHP CGI binary will handle the requests.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Drupalcon 2010 talk: About the Rules ecosystem</title>
            <pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://klau.si/blog/drupalcon-rules-ecosystem/</link>
            <guid>https://klau.si/blog/drupalcon-rules-ecosystem/</guid>
            <description>&lt;p&gt;Here is the video of our DrupalCon Copenhagen 2010 talk &amp;quot;About the Rules ecosystem&amp;quot;.&lt;&#x2F;p&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;archive.org&#x2F;embed&#x2F;AboutTheRulesEcosystem&quot; width=&quot;420&quot; height=&quot;236&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Abandon CVS and synchronize your code from git automatically</title>
            <pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate>
            <link>https://klau.si/git-cvs-export/</link>
            <guid>https://klau.si/git-cvs-export/</guid>
            <description>&lt;p&gt;
	Sick of developing a Drupal module with CVS? Want to use git but also want your code in CVS on drupal.org for development snapshots? This is an approach to get rid of using CVS completely by synchronizing a git repository automatically to CVS. Basic git knowledge required. Script is on &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;klausi&#x2F;git-cvs-export&quot;&gt;Github&lt;&#x2F;a&gt;. Needs some testing though.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Integration?</title>
            <pubDate>Thu, 17 Jun 2010 00:00:00 +0000</pubDate>
            <link>https://klau.si/integration/</link>
            <guid>https://klau.si/integration/</guid>
            <description>&lt;p&gt;
	Eine &lt;a href=&quot;http:&#x2F;&#x2F;fsinf.at&#x2F;humanit%C3%A4res-bleiberecht-f%C3%BCr-alle-petition-der-gr%C3%BCnen&quot;&gt;Diskussion rund ums Bleiberecht auf fsinf.at&lt;&#x2F;a&gt; hat mich dazu bewegt auch wiedermal ein bisschen nachzudenken und politischen Senf abzugeben, hier nochmal mein Kommentar zur Frage was denn Integration eigentlich ist:&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Ubuntu talking Elvish or Klingon?</title>
            <pubDate>Mon, 17 May 2010 00:00:00 +0000</pubDate>
            <link>https://klau.si/ubuntu-talking-elvish-or-klingon/</link>
            <guid>https://klau.si/ubuntu-talking-elvish-or-klingon/</guid>
            <description>&lt;p&gt;
	Funny screenshot I captured yesterday (I guess this bug was originally caused by outputting binary data in a terminal):&lt;&#x2F;p&gt;
&lt;p&gt;
	&lt;a href=&quot;&#x2F;files&#x2F;ubuntu-elvish-klingon.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;&#x2F;files&#x2F;ubuntu-elvish-klingon.png&quot; style=&quot;width: 500px; height: 313px;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Lightning talk about hooks in Drupal</title>
            <pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate>
            <link>https://klau.si/lightning-talk-about-hooks-drupal/</link>
            <guid>https://klau.si/lightning-talk-about-hooks-drupal/</guid>
            <description>&lt;p&gt;
	I will attend the &lt;a href=&quot;http:&#x2F;&#x2F;sf2010.drupal.org&#x2F;conference&#x2F;core-developer-summit&quot;&gt;Drupal Core Developer Summit&lt;&#x2F;a&gt; at Drupalcon San Francisco, so I had to prepare a short lighting talk about a topic that bothers me in Drupal. As I ran into an issue of implementing a hook by accident recently, I decided to come up with some suggestions how to improve the situation. I have attached &lt;a href=&quot;&#x2F;files&#x2F;hooks_drupal.pdf&quot;&gt;the PDF&lt;&#x2F;a&gt; I will submit.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Gmail and postmaster</title>
            <pubDate>Mon, 22 Feb 2010 00:00:00 +0000</pubDate>
            <link>https://klau.si/gmail-and-postmaster/</link>
            <guid>https://klau.si/gmail-and-postmaster/</guid>
            <description>&lt;p&gt;The Gmail spam filter works fine most time, but be careful if you are the postmaster of a mail server and want to check delivery failure notifications in your Gmail account.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A master thesis about Drupal and Web Services</title>
            <pubDate>Mon, 15 Feb 2010 00:00:00 +0000</pubDate>
            <link>https://klau.si/master-thesis-about-drupal-and-web-services/</link>
            <guid>https://klau.si/master-thesis-about-drupal-and-web-services/</guid>
            <description>&lt;p&gt;
	In the last weeks I thought about a topic for my master thesis at the Vienna University of Technology, and I came up with the idea of integrating Drupal and Web Services.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Drupal Core update script</title>
            <pubDate>Tue, 22 Dec 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/drupal-core-update-script/</link>
            <guid>https://klau.si/drupal-core-update-script/</guid>
            <description>&lt;p&gt;
	&lt;strong&gt;Update: Do not use this script anymore, drush provides a very good upgrade mechanism itself now!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;
	Upgrading &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&quot;&gt;Drupal&lt;&#x2F;a&gt; core can be a very tedious task - especially if you run a Drupal multi site installation (backup database, put site into maintenance mode, run update DB script, put site online again - repeat for every single site). We use &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&#x2F;project&#x2F;drush&quot;&gt;Drush&lt;&#x2F;a&gt; and a custom bash script to make life much more easier on our fsinf.at Drupal farm.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Ruby on Rails Setup on Ubuntu 9.10</title>
            <pubDate>Thu, 10 Dec 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/ruby-rails-setup-ubuntu-910/</link>
            <guid>https://klau.si/ruby-rails-setup-ubuntu-910/</guid>
            <description>&lt;p&gt;I&#x27;m working on a Ruby on Rails project right now and had to setup an environment on my Ubuntu 9.10 system. Here are the install commands for your reference if you want to get it done fast.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Thunderbird 3 quick test</title>
            <pubDate>Wed, 09 Dec 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/thunderbird-3-quick-test/</link>
            <guid>https://klau.si/thunderbird-3-quick-test/</guid>
            <description>&lt;p&gt;Just tested the new Mozilla Thunderbird 3 mailclient, here is a very short review what has changed since version 2.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Development and deployment workflow at Absolventen.at</title>
            <pubDate>Sat, 28 Nov 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/development-and-deployment-workflow-absolventenat/</link>
            <guid>https://klau.si/development-and-deployment-workflow-absolventenat/</guid>
            <description>&lt;p&gt;Here you can find the slides to my &lt;a href=&quot;http:&#x2F;&#x2F;drupalcamp.at&quot;&gt;Drupalcamp Vienna&lt;&#x2F;a&gt; presentation about development and deployment at &lt;a href=&quot;http:&#x2F;&#x2F;absolventen.at&quot;&gt;Absolventen.at&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;files&#x2F;absolventen-dev-workflow.pdf&quot;&gt;Presentation as PDF&lt;&#x2F;a&gt; or as &lt;a href=&quot;&#x2F;files&#x2F;absolventen-dev-workflow.odp&quot;&gt;ODP&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>PHP vs. Python vs. Ruby</title>
            <pubDate>Sun, 22 Nov 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/php-vs-python-vs-ruby/</link>
            <guid>https://klau.si/php-vs-python-vs-ruby/</guid>
            <description>&lt;p&gt;I did an interesting programming language comparison last semester and wrote up a paper called &amp;quot;&lt;a href=&quot;&#x2F;sites&#x2F;default&#x2F;files&#x2F;php-vs-python-vs-ruby.pdf&quot;&gt;PHP vs. Python vs. Ruby &amp;ndash; The web scripting language shootout&amp;quot;&lt;&#x2F;a&gt;. I&#x27;m not completely satisfied with it as it does not dig deep enough into the details, but it provides a good introduction and overview. As my time was limited and the seminar was only worth 3 ECTS, further investigation and experiments were not done - I would appreciate any additional references on this topic, feel free to post a comment or contact me. &lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Yet another blog move</title>
            <pubDate>Sun, 22 Nov 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/yet-another-blog-move/</link>
            <guid>https://klau.si/yet-another-blog-move/</guid>
            <description>&lt;p&gt;While I liked the &lt;a href=&quot;https:&#x2F;&#x2F;web.student.tuwien.ac.at&#x2F;~e0426223&#x2F;&quot;&gt;webspace&lt;&#x2F;a&gt; offered by the Vienna university of technology, I decided to move my Drupal blog to the Drupal farm at fsinf.at. This has two advantages: less administration&#x2F;update overhead (I&#x27;m responsible for Drupal updates on fsinf.at as well) and a much shorter, easy to remember URL.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Pro E-Voting</title>
            <pubDate>Thu, 07 May 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/pro-e-voting/</link>
            <guid>https://klau.si/pro-e-voting/</guid>
            <description>&lt;p&gt;Bei den &amp;Ouml;H-Wahlen 2009 kommt ja erstmals E-Voting in &amp;Ouml;sterreich zum Einsatz (Abgabe der Stimme &amp;uuml;ber das Internet). Es gibt viele gute Gr&amp;uuml;nde, warum E-Voting gef&amp;auml;hrlich ist, siehe dazu z.B. &lt;a href=&quot;http:&#x2F;&#x2F;papierwahl.at&#x2F;&quot;&gt;papierwahl.at&lt;&#x2F;a&gt; oder einen &lt;a href=&quot;http:&#x2F;&#x2F;sendungsarchiv.o94.at&#x2F;get.php?id=094pr3327&quot;&gt;Podcast von Peter Purgathofer&lt;&#x2F;a&gt;. Ich war letztens auf einer Podiumsdiskussion zu dem Thema und es war erschreckend, wie schlecht das System von einem &amp;Ouml;VP-Abgeordneten und einem Beamten aus dem Ministerium verkauft wurde. Es gab praktisch nur zwei Pro-Argumente: E-Voting erh&amp;ouml;ht die Wahlbeteiligung und E-Voting ist eh sicher. Weil aber mein gesamtes Umfeld gegen E-Voting ist, will keine produktive Diskussion aufkommen. Muss ich eben selbst als Advocatus Diaboli schl&amp;uuml;ssige Argumente f&amp;uuml;r E-Voting liefern, um ein bisschen einzuheizen:&lt;&#x2F;p&gt;
&lt;ul&gt;
    &lt;li&gt;E-Voting ist ein unglaublich schnelles Mittel zur Partizipation von Studierenden, B&amp;uuml;rgerInnen etc. Sollte E-Voting bei den &amp;Ouml;H-Wahlen erfolgreich getestet werden, k&amp;ouml;nnte es auch f&amp;uuml;r andere Entscheidungen des &amp;quot;Volkes&amp;quot; herangezogen werden. Im Idealfall wird damit eine rein representative Demokratie durch eine mehr direkte Demokratie abgel&amp;ouml;st, wo wichtige Entscheidungen schnell und effektiv mit direkten Stimmen getroffen werden k&amp;ouml;nnen. E-Voting f&amp;ouml;rdert also den demokratischen Beitrag und die Mitbestimmung jeder einzelnen Person.&lt;&#x2F;li&gt;
    &lt;li&gt;E-Voting ist bequem. Kein m&amp;uuml;hsames Herumwarten in endlosen Schlangen bei den Wahllokalen, sondern zeitlich selbstbestimmtes Abegeben einer Stimme in wenigen Sekunden. Keine l&amp;auml;stige Pflicht, sondern ein angenehmes Recht.&lt;&#x2F;li&gt;
    &lt;li&gt;E-Voting schafft Bewusstsein f&amp;uuml;r Informationstechnologie. Mehr Menschen setzen sich mit dem wichtigesten Medium in den n&amp;auml;chsten Jahren auseinander: dem Computer mit Internetzugang. Dadurch steigt das Verst&amp;auml;ndnis f&amp;uuml;r die Notwendigkeit den eigenen Computer abzusichern und regelm&amp;auml;&amp;szlig;ig zu warten, was wiederum die Ausbreitung von Viren, W&amp;uuml;rmern, Spam etc. einschr&amp;auml;nkt.&lt;&#x2F;li&gt;
    &lt;li&gt;E-Voting k&amp;ouml;nnte als Free &amp;amp; Open Source Projekt vertrauensw&amp;uuml;rdig sein&#x2F;werden. Viel sicherheitskritische Software wird erfolgreich offen entwickelt (Betriebssysteme wie GNU&#x2F;Linux oder BSD, Verschl&amp;uuml;sselungssysteme wie OpenSSL oder GPG) und wird auch in solchen Bereichen eingesetzt. Frei nach Linus Torvalds: &amp;quot;given enough eyeballs, all bugs are shallow&amp;quot; (mit gen&amp;uuml;gend Augenpaaren sind alle Softwarefehler einfach).&lt;&#x2F;li&gt;
    &lt;li&gt;E-Voting ist billiger. Ist das System erst mal getestet und dauerhaft im Einsatz, dann reduzieren sich die Kosten pro Wahlgang. Wahlen k&amp;ouml;nnen auch kurzfristiger organisiert werden, womit wir wieder beim meinem ersten Punkt angekommen w&amp;auml;ren.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Disclaimer: Ich bin aus den allseits bekannten Gr&amp;uuml;nden gegen E-Voting, will aber eine offene Diskussion.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Stirb Wordpress, stirb!</title>
            <pubDate>Fri, 27 Feb 2009 00:00:00 +0000</pubDate>
            <link>https://klau.si/stirb-wordpress-stirb/</link>
            <guid>https://klau.si/stirb-wordpress-stirb/</guid>
            <description>&lt;p&gt;Endlich geschafft: Mein Weblog l&amp;auml;uft jetzt auf &lt;a href=&quot;http:&#x2F;&#x2F;drupal.org&quot;&gt;Drupal&lt;&#x2F;a&gt; und nicht mehr auf dem unsympathischen &lt;a href=&quot;http:&#x2F;&#x2F;wordpress.org&quot;&gt;Wordpress&lt;&#x2F;a&gt;. Gleichzeitig bin ich umgezogen - ich will mal den Webspace der TU ausprobieren. Seit einiger Zeit bietet der ZID ja PHP- und Mysql-Unterst&amp;uuml;tzung an, sodass hier auch Content Management Systeme aufgezogen werden k&amp;ouml;nnen.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The sidux way of life - Beispiel OpenOffice 3</title>
            <pubDate>Thu, 30 Oct 2008 00:00:00 +0000</pubDate>
            <link>https://klau.si/sidux-way-life-beispiel-openoffice-3/</link>
            <guid>https://klau.si/sidux-way-life-beispiel-openoffice-3/</guid>
            <description>&lt;p&gt;Eine &lt;a href=&quot;http:&#x2F;&#x2F;ikhaya.ubuntuusers.de&#x2F;2008&#x2F;10&#x2F;25&#x2F;ubuntu-rechtfertigt-entscheidung-gegen-openoffice.org-3.0&#x2F;&quot; target=&quot;_blank&quot;&gt;Ikhaya Meldung auf ubuntuusers.de&lt;&#x2F;a&gt; samt &lt;a href=&quot;http:&#x2F;&#x2F;forum.ubuntuusers.de&#x2F;topic&#x2F;ikhaya-ubuntu-rechtfertigt-entscheidung-gegen&#x2F;&quot;&gt;Diskussion&lt;&#x2F;a&gt; brachte mich letztens ein bisschen zum Lächeln: OpenOffice 3 wird nicht in Ubuntu 8.10 Intrepid Ibex enthalten sein. Großes Wehklagen war bei den Fans von Ubuntu (gleichzeitig Fans aktueller Software) zu hören, so was wird mir bei der Distribution meiner Wahl jedenfalls nicht passieren.</description>
        </item>
        <item>
            <title>Python Dbus Gajim Magic</title>
            <pubDate>Sun, 28 Sep 2008 00:00:00 +0000</pubDate>
            <link>https://klau.si/python-dbus-gajim-magic/</link>
            <guid>https://klau.si/python-dbus-gajim-magic/</guid>
            <description>&lt;p&gt;I like &lt;a href=&quot;http:&#x2F;&#x2F;freedesktop.org&#x2F;wiki&#x2F;Software&#x2F;dbus&quot;&gt;Dbus&lt;&#x2F;a&gt; because it allows desktop applications to communicate with each other. I also like &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;, a powerful scripting language that is perfect for short tasks with a minimum of commands. And finally I like &lt;a href=&quot;http:&#x2F;&#x2F;www.gajim.org&quot;&gt;Gajim&lt;&#x2F;a&gt;, the instant messenger of my choice for the &lt;a href=&quot;http:&#x2F;&#x2F;jabber.rwth-aachen.de&#x2F;wiki&#x2F;index.php&#x2F;Jabber_-_Einfach_erkl%C3%A4rt!&quot;&gt;XMPP-Jabber network&lt;&#x2F;a&gt; (the only free [free as in free speech] instant messaging network!).&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Mit dem Schlauchboot die Donau runter</title>
            <pubDate>Fri, 05 Sep 2008 00:00:00 +0000</pubDate>
            <link>https://klau.si/mit-dem-schlauchboot-die-donau-runter/</link>
            <guid>https://klau.si/mit-dem-schlauchboot-die-donau-runter/</guid>
            <description>&lt;p&gt;Ein etwas sp&amp;auml;ter Nachbericht meiner Reise im Juli.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img height=&quot;240&quot; width=&quot;320&quot; style=&quot;vertical-align: middle;&quot; src=&quot;&#x2F;files&#x2F;donau-fahrt.png&quot; alt=&quot;Auf der Donau mit Peace-Flagge&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Was als Schnapsidee entstand, haben wir diesen Sommer realisiert: Mit einem gebrauchten, motorlosen Schlauboot traten wir Anfang Juli eine vierw&amp;ouml;chige Abenteuerfahrt die Donau hinunter an. Ausger&amp;uuml;stet mit Zelten, wasserdichten S&amp;auml;cken, einem ausf&amp;uuml;hrlichen Buch &amp;uuml;ber die Donaubefahrung, einem billigen 40 Euro Beiboot und zwei Paddeln machten wir uns zu dritt von Wien aus auf einen gem&amp;uuml;tlichen Trip auf.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Mach der Volksfront den Garaus</title>
            <pubDate>Tue, 12 Aug 2008 00:00:00 +0000</pubDate>
            <link>https://klau.si/mach-der-volksfront-den-garaus/</link>
            <guid>https://klau.si/mach-der-volksfront-den-garaus/</guid>
            <description>&lt;p&gt;Es ist wieder Wahlkampf in Österreich - passend dazu hier ein Schmakerl der ÖVP Propaganda aus dem Jahre 1966: Ein schönes Marsch-Lied mit schrägem, lustigem Text. Eignet sich perfekt zum Grölen im alkoholisiertem Zustand, beispielsweise auf Festivals (heuer am &lt;a title=&quot;Sauzipf Rocks&quot; href=&quot;http:&#x2F;&#x2F;www.sauzipfrocks.com&quot; target=&quot;_blank&quot;&gt;Sauzip&lt;&#x2F;a&gt;&lt;a title=&quot;Sauzipf Rocks&quot; href=&quot;http:&#x2F;&#x2F;www.sauzipfrocks.com&quot; target=&quot;_blank&quot;&gt;f&lt;&#x2F;a&gt; Camping Platz zu hören gewesen).&lt;&#x2F;p&gt;
&lt;p&gt;Hier der Link zum Lied als MP3: &lt;a title=&quot;ÖVP Wahkampfsong 1966&quot; href=&quot;http:&#x2F;&#x2F;stud4.tuwien.ac.at&#x2F;~e0426223&#x2F;oevp66.mp3&quot; target=&quot;_blank&quot;&gt;Download&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;a title=&quot;ÖVP Wahkampfsong 1966&quot; href=&quot;http:&#x2F;&#x2F;stud4.tuwien.ac.at&#x2F;~e0426223&#x2F;oevp66.mp3&quot; target=&quot;_blank&quot;&gt;
</description>
        </item>
        <item>
            <title>Die deutsche Wikipedia ist tot</title>
            <pubDate>Sun, 18 May 2008 00:00:00 +0000</pubDate>
            <link>https://klau.si/die-deutsche-wikipedia-ist-tot/</link>
            <guid>https://klau.si/die-deutsche-wikipedia-ist-tot/</guid>
            <description>&lt;p&gt;Ich mag die &lt;a title=&quot;Wikipedia&quot; href=&quot;http:&#x2F;&#x2F;wikipedia.org&#x2F;&quot; target=&quot;_blank&quot;&gt;Wikipedia&lt;&#x2F;a&gt; eigentlich. Du weißt über einen Begriff nicht wirklich Bescheid und willst kurz wissen wo du ihn einordnen sollst - dafür war die &lt;a title=&quot;die &quot; href=&quot;http:&#x2F;&#x2F;de.wikipedia.org&#x2F;wiki&#x2F;Hauptseite&quot; target=&quot;_blank&quot;&gt;deutsche Wikipedia&lt;&#x2F;a&gt; zum Nachschlagen bestens geeignet. Klar, eine jede weiß, dass man den Inhalten nur bedingt vertrauen kann, aber für den Einstieg und für weiterführende Links war es immer noch gut genug.&lt;&#x2F;p&gt;
&lt;p&gt;Unlängst wollte ich mal schauen, was in der deutschen Wikipedia eigentlich über das Betriebssystem, das ich auf meinem Desktop-Rechner benutze, steht (&lt;a title=&quot;Sidux Home&quot; href=&quot;http:&#x2F;&#x2F;sidux.com&quot; target=&quot;_blank&quot;&gt;Sidux&lt;&#x2F;a&gt; - darüber habe ich auch schon mal &lt;a href=&quot;https:&#x2F;&#x2F;klau.si&#x2F;sidux-der-n%C3%A4chste-schritt&#x2F;&quot;&gt;was geschrieben&lt;&#x2F;a&gt;). Zu meiner Verwunderung existierte kein Artikel dazu, also dachte ich mir ich lege mal schnell einen an mit ein paar Sätzen Inhalt, damit zumindest irgendwas über Sidux drinsteht, falls jemand mal nach dem Begriff sucht.&lt;&#x2F;p&gt;
&lt;p&gt;Leider kam ich nicht weit, weil mich ein roter Banner vom Bearbeiten abhielt: &amp;quot;&lt;strong&gt;Eine Seite mit diesem Namen kann nicht angelegt werden. Die Sperre wurde durch FritzG mit der Begründung &lt;em&gt;„“&lt;&#x2F;em&gt; eingerichtet.&lt;&#x2F;strong&gt;&amp;quot;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Display the currently playing song from rythmbox as gajim status message</title>
            <pubDate>Fri, 22 Feb 2008 00:00:00 +0000</pubDate>
            <link>https://klau.si/display-currently-playing-song-rythmbox-gajim-status-message/</link>
            <guid>https://klau.si/display-currently-playing-song-rythmbox-gajim-status-message/</guid>
            <description>&lt;p&gt;I found a nice feature in the preferences of my instant messenger &lt;a href=&quot;http:&#x2F;&#x2F;www.gajim.org&quot; title=&quot;Gajim home&quot;&gt;gajim&lt;&#x2F;a&gt;, where a check box says &amp;quot;Set status message to reflect currently playing music track&amp;quot;. My only problem was that i could not enable the option, because it was greyed out and not active. First I tried to find a plugin for my musicplayer &lt;a href=&quot;http:&#x2F;&#x2F;rhythmbox.org&quot; title=&quot;Rhythmbox home&quot;&gt;r&lt;&#x2F;a&gt;&lt;a href=&quot;http:&#x2F;&#x2F;rhythmbox.org&quot; title=&quot;Rhythmbox home&quot;&gt;hythmbox&lt;&#x2F;a&gt;, but the information I found seemed to be old and several web pages said that gajim and rhythmbox should work together natively. I remembered that most &lt;a href=&quot;http:&#x2F;&#x2F;gnome.org&quot; title=&quot;GNOME home&quot;&gt;GNOME&lt;&#x2F;a&gt; applications use &lt;a href=&quot;http:&#x2F;&#x2F;www.freedesktop.org&#x2F;wiki&#x2F;Software&#x2F;dbus&quot; title=&quot;D-Bus home&quot;&gt;D-Bus&lt;&#x2F;a&gt; to communicate with each other. I supposed that there was a D-Bus package missing on my &lt;a href=&quot;http:&#x2F;&#x2F;sidux.com&quot; title=&quot;Sidux home&quot;&gt;Sidux&lt;&#x2F;a&gt; system, so I searched the package repository with &amp;quot;apt-cache search dbus&amp;quot; and found a package named &amp;quot;&lt;a href=&quot;http:&#x2F;&#x2F;packages.debian.org&#x2F;sid&#x2F;python-dbus&quot; title=&quot;Debian package info&quot;&gt;python-dbus&lt;&#x2F;a&gt;&amp;quot;. Since I know that gajim is written in &lt;a href=&quot;http:&#x2F;&#x2F;python.org&quot; title=&quot;Python home&quot;&gt;python&lt;&#x2F;a&gt; I installed the package and had success: After a restart of gajim the option was now available and worked when enabled.&lt;&#x2F;p&gt;
&lt;p&gt;Solution worked with gajim 0.11.4 and rhythmbox 0.10.1.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Sidux - der nächste Schritt</title>
            <pubDate>Fri, 15 Feb 2008 00:00:00 +0000</pubDate>
            <link>https://klau.si/sidux-der-nächste-schritt/</link>
            <guid>https://klau.si/sidux-der-nächste-schritt/</guid>
            <description>&lt;p&gt;Lange habe ich auf meinem Desktop-Rechner &lt;a href=&quot;http:&#x2F;&#x2F;ubuntu.com&quot; title=&quot;Ubuntu Home&quot;&gt;Ubuntu GNU&#x2F;Linux&lt;&#x2F;a&gt; eingesetzt, was für mich zumeist sehr bequem funktioniert hat. Am Anfang wusste ich kaum wie man eine Shell  bedient - es war bei Ubuntu auch nur selten notwendig, vieles ging über grafische Konfigurationstools oder man befragte einfach das ausgezeichnete &lt;a href=&quot;http:&#x2F;&#x2F;wiki.ubuntuusers.de&#x2F;&quot; title=&quot;deutsches Ubuntu Wiki&quot;&gt;Ubuntuusers-Wiki&lt;&#x2F;a&gt;. Die Jahre zogen ins Land, auf der Uni wurde auch viel mit GNU&#x2F;Linux&#x2F;Unix gemacht und ich begann schön langsam die Innereien eines debian-artigen Betriebssystems kennenzulernen (Ubuntu basiert ja auf &lt;a href=&quot;http:&#x2F;&#x2F;debian.org&quot; title=&quot;Debian Home&quot;&gt;Debian&lt;&#x2F;a&gt;). Die Philosophie von freier bzw. open source Software überzeugte mich immer mehr, und ich konnte fast ganz auf Windows XP verzichten (XP habe ich heute noch im &lt;a href=&quot;http:&#x2F;&#x2F;wiki.ubuntuusers.de&#x2F;Dualboot&quot; title=&quot;Wikibeitrag zu Dualboot&quot;&gt;Dualboot&lt;&#x2F;a&gt;, Vista habe ich gar nie probiert).&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Klitoris - die schöne Unbekannte</title>
            <pubDate>Sun, 25 Nov 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/klitoris-die-schöne-unbekannte/</link>
            <guid>https://klau.si/klitoris-die-schöne-unbekannte/</guid>
            <description>&lt;p&gt;Ich habe den spannenden Themenabend &lt;a href=&quot;http:&#x2F;&#x2F;www.arte.tv&#x2F;de&#x2F;woche&#x2F;244,broadcastingNum=775128,day=7,week=47,year=2007.html&quot;&gt;&amp;quot;Jetzt Onanie!&amp;quot;&lt;&#x2F;a&gt; auf &lt;a href=&quot;http:&#x2F;&#x2F;www.arte.tv&quot;&gt;arte&lt;&#x2F;a&gt; gesehen, wo es um Selbstbefriedigung und Sexualit&amp;auml;t ging. Besonders interessant war ein Beitrag zum weiblichen Sexualorgan schlechthin: der Klitoris. Seien wir ehrlich: Wer wei&amp;szlig; schon wirklich wie sie funktioniert?  Das liegt vor allem daran, dass die weibliche Sexualit&amp;auml;t nur schlecht erforscht und dokumentiert ist, und dass erst allm&amp;auml;hlich neue Erkenntnisse aus der Forschung gewonnen werden.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Windows Vista gratis</title>
            <pubDate>Wed, 21 Nov 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/windows-vista-gratis/</link>
            <guid>https://klau.si/windows-vista-gratis/</guid>
            <description>&lt;p&gt;Jetzt gibt es ein unglaubliches Angebot: &lt;a href=&quot;http:&#x2F;&#x2F;www.ubuntu.com&#x2F;&quot;&gt;Microsoft Windows Vista Ultimate Edition&lt;&#x2F;a&gt; kann gratis aus dem Internet heruntergeladen werden, und das völlig legal! Diese Version ist außerdem auf Sicherheit ausgelegt und benötigt daher keinen Virenscanner und keine Firewall! Mitgeliefert werden volle 3D-Effekte, das &lt;a href=&quot;http:&#x2F;&#x2F;www.openoffice.org&#x2F;&quot;&gt;Microsoft Office Professional&lt;&#x2F;a&gt; Paket und &lt;a href=&quot;http:&#x2F;&#x2F;www.gimp.org&#x2F;&quot;&gt;Adobe Photoshop&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ubuntu.gds.tuwien.ac.at&#x2F;cdimage&#x2F;releases&#x2F;gutsy&#x2F;ubuntu-7.10-desktop-i386.iso&quot;&gt;Hier geht&#x27;s zum Download ...&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Meine Lieblingsseiten, meine Lieblingssoftware</title>
            <pubDate>Fri, 09 Nov 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/meine-lieblingsseiten-meine-lieblingssoftware/</link>
            <guid>https://klau.si/meine-lieblingsseiten-meine-lieblingssoftware/</guid>
            <description>&lt;p&gt;Ich habe mal auf &lt;a href=&quot;http:&#x2F;&#x2F;vowi.fsinf.at&#x2F;wiki&#x2F;Benutzer:Klausi&quot; title=&quot;Meine Seite im VoWi&quot; target=&quot;_blank&quot;&gt;meiner Benutzerseite&lt;&#x2F;a&gt; im &lt;a href=&quot;http:&#x2F;&#x2F;vowi.fsinf.at&quot; title=&quot;VorlesungsWiki&quot; target=&quot;_blank&quot;&gt;VoWi&lt;&#x2F;a&gt; eine Auflistung zu meinem elektronischen Alltag erstellt. Kommentare zu besseren Seiten und besseren Programmen sind willkommen!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Brecht das Gesetz, brecht die Abschiebung</title>
            <pubDate>Fri, 19 Oct 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/brecht-das-gesetz-brecht-die-abschiebung/</link>
            <guid>https://klau.si/brecht-das-gesetz-brecht-die-abschiebung/</guid>
            <description>&lt;p&gt;Abgesehen von dem etwas grauslichen Fremdenrecht sind leider auch die Asylverfahren in Österreich ja nicht gerade schnell. Was dann passiert, haben wir in letzter Zeit deutlich mitbekommen: Menschen, die seit vielen Jahren in Österreich leben, werden abgeschoben.&lt;&#x2F;p&gt;
&lt;p&gt;Was also tun? Es wurde eine &lt;a href=&quot;http:&#x2F;&#x2F;gegenabschiebung.wordpress.com&#x2F;&quot; title=&quot;Online Unterschriftenliste&quot; target=&quot;_blank&quot;&gt;Solidaritätsliste&lt;&#x2F;a&gt; ins Leben gerufen, die sich eindeutig dazu bekennt, von der Abschiebung bedrohten Menschen im Ernstfall weiterzuhelfen, auch wenn das bedeutet, dass damit geltende Gesetze gebrochen werden.&lt;&#x2F;p&gt;
&lt;p&gt;Wie immer muss sich jede einzelne darüber Gedanken machen, ob sie den Gesetzen oder der Menschlichkeit folgen will. Wir sind auch in einer demokratischen Republik nicht davor gefeit mitzudenken bzw. mitzuhelfen und dürfen uns nicht auf die &amp;quot;Gerechtigkeit&amp;quot; des Staates verlassen. Je mehr Menschen sich der Aktion anschließen, desto eher wird auch eine Verbesserung der Gesetze passieren.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Telling Gajim to remember the Window position</title>
            <pubDate>Sun, 26 Aug 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/telling-gajim-remember-window-position/</link>
            <guid>https://klau.si/telling-gajim-remember-window-position/</guid>
            <description>&lt;p&gt;Recently I deprecated my ICQ account and switched from my old Instant Messaging Client &lt;a href=&quot;http:&#x2F;&#x2F;www.pidgin.im&quot; title=&quot;Pidign Project Site&quot; target=&quot;_blank&quot;&gt;Pidgin&lt;&#x2F;a&gt; to &lt;a href=&quot;http:&#x2F;&#x2F;www.gajim.org&#x2F;&quot; title=&quot;Gajim Project Site&quot; target=&quot;_blank&quot;&gt;Gajim&lt;&#x2F;a&gt;, a &lt;a href=&quot;http:&#x2F;&#x2F;www.jabber.org&#x2F;about&#x2F;overview.shtml&quot; title=&quot;Jabber Protocol Overview&quot;&gt;Jabber&lt;&#x2F;a&gt;-only IM-client. The good thing: Messages can now be encrypted with &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pretty_Good_Privacy&quot; title=&quot;Wikipedia about PGP&quot; target=&quot;_blank&quot;&gt;PGP&#x2F;GPG&lt;&#x2F;a&gt;! The bad thing: The Window position and size was not remembered by Gajim, so the program appeared always on the left instead of the right side, where I placed it, and that on every program start.&lt;&#x2F;p&gt;
&lt;p&gt;Solution:&lt;&#x2F;p&gt;
&lt;ol&gt;
	&lt;li&gt;Go to preferences  ==&amp;gt; Advanced ==&amp;gt; Advanced Configuration Editor&lt;&#x2F;li&gt;
	&lt;li&gt;Filter for &quot;roster_x-position&quot;, &quot;roster_y-position&quot; and &quot;saveposition&quot;&lt;&#x2F;li&gt;
	&lt;li&gt;Set the values for each to &quot;Activated&quot; (you have to type the String &quot;Activated&quot; in case of &quot;roster_x-posotion&quot; and &quot;roster_y-position&quot;)&lt;&#x2F;li&gt;
	&lt;li&gt;Change the position and size of your Gajim buddy list window, restart Gajim and check if the changes are remembered&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
Solution worked with Gajim version 0.11.1.
</description>
        </item>
        <item>
            <title>FrauInnen, Emanzencodex und das ganze Gender-Blabla</title>
            <pubDate>Tue, 07 Aug 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/frauinnen-emanzencodex-und-das-ganze-gender-blabla/</link>
            <guid>https://klau.si/frauinnen-emanzencodex-und-das-ganze-gender-blabla/</guid>
            <description>&lt;p&gt;Nette Überschrift, etwas übertrieben vielleicht, aber nett. In letzter Zeit gab es viele Diskussionen zum Thema Gleichberechtigung in meinem Online-Umfeld, angefangen bei &lt;a href=&quot;http:&#x2F;&#x2F;fsinf.at&#x2F;node&#x2F;449&quot;&gt;Kommentaren auf fsinf.at&lt;&#x2F;a&gt;, über einen &lt;a href=&quot;http:&#x2F;&#x2F;www.informatik-forum.at&#x2F;showthread.php?t=54487&quot;&gt;Frauenräume-Thread&lt;&#x2F;a&gt; im Informatik-Forum, bis hin zu einer Offtopic-Grundsatzdiskussion über geschlechtergerechte Sprache im &lt;a href=&quot;http:&#x2F;&#x2F;www.informatik-forum.at&#x2F;showthread.php?t=53667&quot;&gt;Veganismus-Thread&lt;&#x2F;a&gt;, ebenfalls im Informatik-Forum. Ich möchte hier nochmals meine Meinung zusammenfassen.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Der Nationalsozialismus und ich</title>
            <pubDate>Wed, 25 Jul 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/der-nationalsozialismus-und-ich/</link>
            <guid>https://klau.si/der-nationalsozialismus-und-ich/</guid>
            <description>&lt;p&gt;Oft erwähnt, oft für Beispiele herangezogen (siehe auch &lt;a href=&quot;http:&#x2F;&#x2F;de.wikipedia.org&#x2F;wiki&#x2F;Godwins_law&quot; title=&quot;Godwins Law&quot; target=&quot;_blank&quot;&gt;Godwins Law&lt;&#x2F;a&gt;), gut dokumentiert und wohlbekannt: der Nationalsozialismus. Wir alle wissen was in den Dreißiger Jahren und im zweiten Weltkrieg passiert ist, es wurde uns in der Schule beigebracht und von der älteren Generation überliefert. Wir wissen auch wie es dazu gekommen ist, zumindest ungefähr. Die Frage &amp;quot;Wie konnte das nur passieren?&amp;quot; steht für mich trotzdem immer noch im Raum, die Frage &amp;quot;Wie können wir verhindern, dass so etwas jetzt und in Zukunft nicht mehr passiert?&amp;quot; scheint mir auch viel zuwenig oft diskutiert worden.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Die Vorlesung über die Vorlesung an sich</title>
            <pubDate>Wed, 27 Jun 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/die-vorlesung-über-die-vorlesung-sich/</link>
            <guid>https://klau.si/die-vorlesung-über-die-vorlesung-sich/</guid>
            <description>&lt;p&gt;Ich habe gerade die Online-Prüfung zur &lt;a href=&quot;http:&#x2F;&#x2F;ringvorlesung.univie.ac.at&#x2F;&quot; title=&quot;Homepage der Ringvorlesung&quot; target=&quot;_blank&quot;&gt;Ringvorlesung zum Thema Vorlesung&lt;&#x2F;a&gt; aus dem WS 06&#x2F;07 abgelegt. Man musste eine Prüfungsfrage in einem MS-Word Dokument beantworten und auf die &lt;a href=&quot;http:&#x2F;&#x2F;webct.univie.ac.at&quot; target=&quot;_blank&quot; title=&quot;WebCT Plattform&quot;&gt;E-Lerning Plattform der Uni Wien&lt;&#x2F;a&gt; hinaufladen.&lt;&#x2F;p&gt;
&lt;p&gt;Prüfungsfrage: &amp;quot;Welche Probleme der Wissensvermittlung ergeben sich aus dem Mitschreiben und den Mitschriften einer Vorlesung?&amp;quot;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Oida, bist schwul oder was?</title>
            <pubDate>Sun, 24 Jun 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/oida-bist-schwul-oder-was/</link>
            <guid>https://klau.si/oida-bist-schwul-oder-was/</guid>
            <description>&lt;p&gt;Nein, eigentlich nicht. Vielleicht ein bisschen bisexuell, wie wahrscheinlich jeder Mensch, aber davon merke ich bis jetzt nichts. Homosexualit&amp;auml;t scheint noch immer ein Tabu-Thema zu sein, selbst in Zeiten politischer Akzeptanz und sogenannten aufgekl&amp;auml;rten Jugendlichen. Es wird von den einen als etwas besonderes, etwas au&amp;szlig;erhalb der Norm angesehen, von den anderen als abartig oder sogar als Krankheit betrachtet.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Hello World</title>
            <pubDate>Fri, 22 Jun 2007 00:00:00 +0000</pubDate>
            <link>https://klau.si/hello-world/</link>
            <guid>https://klau.si/hello-world/</guid>
            <description>&lt;p&gt;Wahrscheinlich der 100.000ste WordPress-Weblog der Welt. Ja auch ich halte dem Gruppendruck nicht mehr Stand und eröffne meinen zweiten Weblog (im Gegensatz zu &lt;a href=&quot;http:&#x2F;&#x2F;twoday.tuwien.ac.at&#x2F;klausi&#x2F;&quot;&gt;meinem ersten Weblog&lt;&#x2F;a&gt; verspreche ich diesmal tatsächlich Inhalt zu produzieren ;-) ).&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
